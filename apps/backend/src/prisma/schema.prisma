// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  name         String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  discordOauth DiscordOauth?
  discordData  DiscordData?
  Group        Group[]
  ProcessUser  ProcessUser[]

  @@map("users")
}

model DiscordData {
  id            String   @id @default(uuid()) @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique @map("user_id") @db.Uuid
  discordId     String   @map("discord_id")
  username      String
  discriminator String
  avatar        String
  email         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("discord_data")
}

model DiscordOauth {
  id           String   @id @default(uuid()) @db.Uuid
  discordId    String   @map("discord_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique @map("user_id") @db.Uuid
  accessToken  String   @map("access_token")
  refreshToken String   @map("refresh_token")
  expiresIn    Int      @map("expires_in")
  scope        String
  tokenType    String   @map("token_type")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("discord_oauths")
}

model Group {
  id        String @id @default(uuid()) @db.Uuid
  name      String
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String @map("creator_id") @db.Uuid

  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at")
  activeAt           DateTime?
  deactivatedat      DateTime?
  DiscordServerGroup DiscordServerGroup[]
  ProcessGroup       ProcessGroup[]
  DiscordRoleGroup   DiscordRoleGroup[]

  @@map("groups")
}

model DiscordServerGroup {
  id               String             @id @default(uuid()) @db.Uuid
  discordServerId  String             @map("discord_server_id")
  group            Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId          String             @map("group_id") @db.Uuid
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  DiscordRoleGroup DiscordRoleGroup[]

  @@map("discord_server_groups")
}

model DiscordRoleGroup {
  id                   String             @id @default(uuid()) @db.Uuid
  discordRoleId        String             @map("discord_role_id")
  group                Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  discordServerGroup   DiscordServerGroup @relation(fields: [discordServerGroupId], references: [id], onDelete: Cascade)
  discordServerGroupId String             @map("discord_server_group_id") @db.Uuid
  groupId              String             @map("group_id") @db.Uuid
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @default(now()) @updatedAt @map("updated_at")

  @@map("discord_role_groups")
}

model Process {
  id              String         @id @default(uuid()) @db.Uuid
  name            String
  type            String
  editProcessId   String         @map("edit_process_id") @db.Uuid
  editProcess     Process        @relation("EditProcess", fields: [editProcessId], references: [id])
  processesEdited Process[]      @relation("EditProcess")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
  ProcessGroup    ProcessGroup[]
  ProcessUser     ProcessUser[]

  @@map("processes")
}

model ProcessGroup {
  id          String   @id @default(uuid()) @db.Uuid
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String   @map("group_id") @db.Uuid
  process     Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId   String   @map("process_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  isDefault   Boolean  @default(false) @map("is_default")
  permissions String[] @default([])

  @@map("process_groups")
}

model ProcessUser {
  id          String   @id @default(uuid()) @db.Uuid
  process     Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId   String   @map("process_id") @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  permissions String[] @default([])

  @@map("process_users")
}
