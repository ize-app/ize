// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  name         String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  discordOauth DiscordOauth?
  discordData  DiscordData?
  Group        Group[]

  @@map("users")
}

model DiscordData {
  id            String   @id @default(uuid()) @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique @map("user_id") @db.Uuid
  discordId     String   @map("discord_id")
  username      String
  discriminator String
  avatar        String
  email         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("discord_data")
}

model DiscordOauth {
  id           String   @id @default(uuid()) @db.Uuid
  discordId    String   @map("discord_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique @map("user_id") @db.Uuid
  accessToken  String   @map("access_token")
  refreshToken String   @map("refresh_token")
  expiresIn    Int      @map("expires_in")
  scope        String
  tokenType    String   @map("token_type")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("discord_oauths")
}

model Group {
  id               String            @id @default(uuid()) @db.Uuid
  creator          User              @relation(fields: [creatorId], references: [id])
  creatorId        String            @map("creator_id") @db.Uuid
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at")
  activeAt         DateTime?
  deactivatedat    DateTime?
  discordRoleGroup DiscordRoleGroup?

  @@map("groups")
}

model DiscordRoleGroup {
  id              String        @id @default(uuid()) @db.Uuid
  discordRoleId   String        @map("discord_role_id")
  group           Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String        @unique @map("group_id") @db.Uuid
  discordServer   DiscordServer @relation(fields: [discordServerId], references: [id], onDelete: Cascade)
  discordServerId String        @map("discord_server_id") @db.Uuid
  color           Int
  name            String
  icon            String?
  unicodeEmoji    String?       @map("unicode_emoji")
  memberCount     Int           @map("member_count")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("discord_role_groups")
}

model DiscordServer {
  id               String             @id @default(uuid()) @db.Uuid
  discordServerId  String             @unique @map("discord_server_id")
  name             String
  icon             String?
  banner           String?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  DiscordRoleGroup DiscordRoleGroup[]

  @@map("discord_servers")
}

