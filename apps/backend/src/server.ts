import express from "express";
import { ApolloServer } from "@apollo/server";
import { expressMiddleware } from "@apollo/server/express4";
import cors from "cors";
import { json } from "body-parser";
import { resolvers } from "./graphql/resolvers/query_resolvers";
import { loadFilesSync } from "@graphql-tools/load-files";
import { makeExecutableSchema } from "@graphql-tools/schema";
import { mergeTypeDefs } from "@graphql-tools/merge";
import * as jwt from 'jsonwebtoken';

const host = process.env.HOST ?? "127.0.0.1";
const port = process.env.PORT ? Number(process.env.PORT) : 3000;

const app = express();

app.get("/", (req, res) => {
  res.send({ message: "Hello API" });
});

// Redirects to Discord OAuth, if user accepts goes to callback URL
app.get("/auth/discord/login", (req, res) => {
  const url =
    "https://discord.com/api/oauth2/authorize?client_id=1129641431057825844&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fauth%2Fdiscord%2Fcallback&response_type=code&scope=identify";

  res.redirect(url);
});

// Discord Callback Route
app.get("/auth/discord/callback", async (req, res) => {
  const { code } = req.query;

  if (!code) {
    // throw error
  }

  // Takes code generated by discord and sends it back to discord to get access token
  const discordResponse = await fetch("https://discord.com/api/oauth2/token", {
    method: "POST",
    body: new URLSearchParams({
      client_id: process.env.DISCORD_OAUTH_CLIENT_ID,
      client_secret: process.env.DISCORD_OAUTH_CLIENT_SECRET,
      grant_type: "authorization_code",
      redirect_uri: process.env.DISCORD_OAUTH_REDIRECT_URI,
      code: code as string,
    }),
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      "Accept-Encoding": "application/x-www-form-urlencoded",
    },
  });

  const { access_token }= await discordResponse.json();

  // Start making requests to discord API using OAuth access token
  const userResponse = await fetch("https://discord.com/api/users/@me", {
    headers: {
      Authorization: `Bearer ${access_token}`,
    },
  });

  const { id, username, avatar } = await userResponse.json();

  // TODO: Save user to database

  // Creating a JWT
  const token = jwt.sign({ sub: id }, process.env.JWT_SECRET);

  res.cookie('token', token);

  res.redirect(process.env.CLIENT_REDIRECT_URL);
});

const typeDefs = mergeTypeDefs(
  loadFilesSync("./src/graphql", { recursive: true, extensions: [".graphql"] })
);

const schema = makeExecutableSchema({
  typeDefs,
  resolvers,
});

const server = new ApolloServer({
  schema,
});

server.start().then(() => {
  app.use(
    "/graphql",
    cors<cors.CorsRequest>(),
    json(),
    expressMiddleware(server)
  );

  app.listen(port, host, () => {
    console.log(`[ API Ready ] http://${host}:${port}`);
  });
});
