type Mutation {
  newRequest(request: NewRequestArgs!): String!
  newResponse(requestId: String!, optionId: String!): String!
}

type Query {
  request(requestId: String!): Request!
  requestsForCurrentUser: [Request!]!
  requestsForGroup(groupId: String!): [Request!]!
  requestsForProcess(processId: String!): [Request!]!
}

input NewRequestArgs {
  flowId: String!
  requestFields: [FieldAnswerArgs!]!
  requestDefinedOptions: [RequestDefinedOptionsArgs!]!
}

input RequestDefinedOptionsArgs {
  fieldId: String!
  options: [FieldOptionArgs!]!
}

type Request {
  id: String!
  name: String!
  creator: User!
  process: Process!
  expirationDate: String!
  inputs: [RequestInput!]!
  createdAt: String!
  responses: Responses!
  result: Result
  evolveProcessChanges: [EvolveProcessesDiff]
}

type Responses {
  userResponse: Response
  allResponses: [Response!]!
  responseCount: [ResponseCount!]!
}

type EvolveProcessesDiff {
  processName: String!
  processId: String!
  changes: ProposedProcessEvolution!
}

type ProposedProcessEvolution {
  current: Process!
  proposed: Process!
}

type Result {
  id: String!
  createdAt: String!
  selectedOption: ProcessOption!
  actionComplete: Boolean!
}

type Response {
  optionId: String!
  value: String!
  user: User!
  type: OptionType!
  createdAt: String!
}

type ResponseCount {
  optionId: String!
  value: String!
  type: OptionType!
  count: Int!
}

type RequestInput {
  inputTemplateId: String!
  requestInputId: String!
  name: String!
  description: String
  type: InputDataType!
  value: String!
  required: Boolean!
}
