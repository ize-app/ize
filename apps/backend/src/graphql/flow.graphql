type Mutation {
  newFlow(flow: NewFlowArgs!): String!
}

type Query {
  getFlow(flowId: String!): Flow!
}

type Flow {
  type: FlowType!
  name: String!
  reusable: Boolean!
  steps: [Step]!
  evolve: Flow # TBD
}

enum FlowType {
  Custom
  Evolve
}

type Step {
  request: RequestConfig!
  response: ResponseConfig!
  result: ResultConfig!
  action: ActionNew
  userPermission: UserPermission!
}

type RequestConfig {
  permission: Permission
  fields: [Field!]
}

type ResponseConfig {
  permission: Permission
  fields: [Field!]
}

type UserPermission {
  request: Boolean!
  response: Boolean!
}

input NewFlowArgs {
  name: String!
  reusable: Boolean!
  steps: [NewStepArgs!]!
  evolve: EvolveFlowArgs
}

input NewStepArgs {
  request: StepRequestArgs
  response: StepResponseArgs
  result: ResultArgs!
  action: ActionNewArgs!
}

input EvolveFlowArgs {
  requestPermission: PermissionArgs!
  responsePermission: PermissionArgs!
  decision: DecisionNewArgs!
}

input StepRequestArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
}

input StepResponseArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
}

input PermissionArgs {
  anyone: Boolean!
  entities: [EntityArgs!]
}

input EntityArgs {
  id: String!
}
