type FieldSet {
  fields: [Field!]!
  locked: Boolean!
}

enum SystemFieldType {
  EvolveFlowProposed
  EvolveFlowCurrent
  EvolveFlowDescription
  GroupName
  GroupDescription
  GroupMembers
  WatchFlow
  UnwatchFlow
}

enum OptionSelectionType {
  None
  Select
  Rank
}

type Field {
  fieldId: String!
  name: String!
  type: ValueType!
  isInternal: Boolean!
  required: Boolean!
  systemType: SystemFieldType
  defaultAnswer: Value
  optionsConfig: OptionsConfig
}

type OptionsConfig {
  options: [Option!]!
  systemType: SystemFieldType
  selectionType: OptionSelectionType!
  maxSelections: Int
  linkedResultOptions: [LinkedResult!]!
  triggerOptionsType: ValueType
}

type LinkedResult {
  resultConfigId: String!
  resultName: String!
  fieldId: String!
  fieldName: String!
}

type Option {
  optionId: String!
  value: OptionValue!
}

type UserFieldAnswer {
  creator: Entity!
  createdAt: String!
  answer: Value!
}

type TriggerFieldAnswer {
  field: Field!
  answer: Value!
}

type ResponseFieldAnswers {
  field: Field!
  answers: [UserFieldAnswer!]!
  summary: ResponseFieldAnswersSummary!
}

type ResponseFieldAnswersSummary {
  count: Int!
  options: [ResponseFieldAnswersOptionsSummary!]
}

type ResponseFieldAnswersOptionsSummary {
  optionId: String!
  count: Int!
  rank: Float
}

input FieldSetArgs {
  fields: [FieldArgs!]!
  locked: Boolean!
}

input FieldArgs {
  fieldId: String!
  name: String!
  type: ValueType!
  required: Boolean!
  isInternal: Boolean!
  systemType: SystemFieldType
  optionsConfig: FieldOptionsConfigArgs
}

input FieldOptionsConfigArgs {
  triggerOptionsType: ValueType
  maxSelections: Int
  selectionType: OptionSelectionType!
  linkedResultOptions: [String!]! # resultConfigIds
  options: [OptionArgs!]!
}

input FieldAnswerArgs {
  fieldId: String!
  value: String # JSON stringified Value, will be interpreted via ValueType of the field
  optionSelections: [OptionSelectionArgs!]
}

input OptionSelectionArgs {
  optionId: String
  optionIndex: Int
  weight: Float!
}

# for creating new Options
input OptionArgs {
  optionId: String! # UUID created on fontend used in backend
  type: ValueType!
  value: String! #JSON stringified Value
}
