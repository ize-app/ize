type Mutation {
  testWebhook(inputs: TestWebhookArgs!): Boolean!
  createWebhook(inputs: CallWebhookArgs!): String!
}

union Action = CallWebhook | EvolveFlow | EvolveGroup | TriggerStep | GroupWatchFlow

type ActionExecution {
  actionId: String!
  lastAttemptedAt: String
  status: Status!
}

type CallWebhook {
  name: String!
  locked: Boolean!
  webhookId: String!
  filterOption: Option
  uri: String!
  webhookName: String!
}

type EvolveFlow {
  name: String!
  locked: Boolean!
  filterOption: Option
}

type TriggerStep {
  name: String!
  locked: Boolean!
  filterOption: Option
}

type GroupWatchFlow {
  name: String!
  locked: Boolean!
  filterOption: Option
}

type EvolveGroup {
  name: String!
  locked: Boolean!
  filterOption: Option
}

# mirrors Prisma type + "None" type
enum ActionType {
  CallWebhook
  TriggerStep
  EvolveFlow
  EvolveGroup
  GroupWatchFlow
  None
}

input CallWebhookArgs {
  webhookId: String
  uri: String!
  originalUri: String
  name: String!
}

input ActionArgs {
  type: ActionType!
  filterResponseFieldIndex: Int
  filterOptionIndex: Int
  callWebhook: CallWebhookArgs
  locked: Boolean!
}

input TestWebhookArgs {
  flowName: String!
  uri: String!
  requestFields: [WebhookValueArgs!]!
  results: [ResultGroupTestWebhookArgs!]!
}

input ResultGroupTestWebhookArgs {
  fieldName: String!
  results: [WebhookValueArgs!]!
}

input WebhookValueArgs {
  fieldName: String!
  fieldType: FieldType!
}
