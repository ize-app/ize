type Mutation {
  testWebhook(inputs: TestWebhookArgs!): Boolean!
}

union Action = CallWebhook | EvolveFlow | EvolveGroup | TriggerStep | GroupWatchFlow

enum ActionStatus {
  NotStarted
  Attempting
  Error
  DidNotPassFilter
  Complete
}

type ActionFilter {
  resultConfigId: String!
  resultName: String!
  option: Option!
}

type ActionExecution {
  actionId: String!
  lastAttemptedAt: String
  status: ActionStatus!
}

type CallWebhook {
  name: String!
  locked: Boolean!
  webhookId: String!
  filter: ActionFilter
  uri: String!
  webhookName: String!
}

type EvolveFlow {
  name: String!
  locked: Boolean!
  filter: ActionFilter
}

type TriggerStep {
  name: String!
  locked: Boolean!
  filter: ActionFilter
  stepId: String!
}

type GroupWatchFlow {
  name: String!
  locked: Boolean!
  filter: ActionFilter
}

type EvolveGroup {
  name: String!
  locked: Boolean!
  filter: ActionFilter
}

# mirrors Prisma type + "None" type
enum ActionType {
  CallWebhook
  TriggerStep
  EvolveFlow
  EvolveGroup
  GroupWatchFlow
}

input CallWebhookArgs {
  webhookId: String
  uri: String!
  originalUri: String
  name: String!
}

input ActionArgs {
  type: ActionType!
  filter: ActionFilterArgs
  callWebhook: CallWebhookArgs
  stepId: String
  locked: Boolean!
}

input ActionFilterArgs {
  resultConfigId: String!
  optionId: String!
}

input TestWebhookArgs {
  flowName: String!
  uri: String!
  triggerFields: [TestWebhookTriggerFieldsArgs!]!
  results: [TestWebhookResultArgs!]!
}

input TestWebhookTriggerFieldsArgs {
  name: String!
  valueType: ValueType!
}

input TestWebhookResultArgs {
  name: String!
  type: ResultType!
  valueType: ValueType!
}
