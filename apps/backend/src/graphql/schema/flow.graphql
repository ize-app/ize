type Mutation {
  newFlow(flow: NewFlowArgs!): String!
}

type Query {
  getFlow(flowId: String, flowVersionId: String, isForEvolveRequest: Boolean): Flow!
  getFlows(
    cursor: String
    limit: Int!
    groupId: String
    searchQuery: String!
    watchFilter: WatchFilter!
    triggerPermissionFilter: FlowTriggerPermissionFilter!
  ): [FlowSummary!]!
}

type Flow {
  id: String!
  flowId: String!
  flowVersionId: String!
  currentFlowVersionId: String
  group: Group
  createdAt: String!
  versionCreatedAt: String!
  versionPublishedAt: String
  active: Boolean!
  type: FlowType!
  name: String!
  reusable: Boolean!
  steps: [Step!]!
  flowsEvolvedByThisFlow: [FlowReference!]!
  evolve: Flow
  isWatched: Boolean!
}

type FlowSummary {
  flowId: String!
  name: String!
  group: Group
  creator: User!
  createdAt: String!
  # permission to trigger first step of the flow
  requestStep0Permission: Permission!
  userPermission: UserFlowPermission!
  isWatched: Boolean!
}

type FlowReference {
  flowId: String!
  flowName: String!
}

enum FlowType {
  Custom
  Evolve
  EvolveGroup
  GroupWatchFlow
}

type Step {
  id: String!
  index: Int!
  request: RequestConfig!
  response: ResponseConfig!
  result: [ResultConfig!]!
  action: Action
  expirationSeconds: Int
  canBeManuallyEnded: Boolean!
  allowMultipleResponses: Boolean!
  userPermission: UserPermission!
}

type RequestConfig {
  permission: Permission
  fields: [Field!]!
  fieldsLocked: Boolean!
}

type ResponseConfig {
  permission: Permission
  fields: [Field!]!
  fieldsLocked: Boolean!
}

type UserPermission {
  request: Boolean!
  response: Boolean!
}

type UserFlowPermission {
  request: Boolean!
}

input NewFlowArgs {
  name: String!
  reusable: Boolean!
  steps: [NewStepArgs!]!
  evolve: EvolveFlowArgs
}

input NewStepArgs {
  request: StepRequestArgs
  response: StepResponseArgs
  result: [ResultArgs!]!
  action: ActionArgs
  expirationSeconds: Int
  allowMultipleResponses: Boolean!
  canBeManuallyEnded: Boolean!
}

input EvolveFlowArgs {
  requestPermission: PermissionArgs!
  responsePermission: PermissionArgs!
  decision: DecisionArgs!
}

input StepRequestArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
  fieldsLocked: Boolean
}

input StepResponseArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
  fieldsLocked: Boolean
}

enum FlowTriggerPermissionFilter {
  All
  TriggerPermission
  NoTriggerPermission
}
