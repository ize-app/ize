type Mutation {
  newFlow(flow: NewFlowArgs!): String!
}

type Query {
  getFlow(flowId: String, flowVersionId: String, isForEvolveRequest: Boolean): Flow!
  getFlows(groupId: String): [FlowSummary!]!
}

type Flow {
  id: String!
  flowId: String!
  flowVersionId: String!
  currentFlowVersionId: String
  createdAt: String!
  versionCreatedAt: String!
  versionPublishedAt: String
  active: Boolean!
  type: FlowType!
  name: String!
  reusable: Boolean!
  steps: [Step!]!
  flowsEvolvedByThisFlow: [FlowReference!]!
  evolve: Flow
}

type FlowSummary {
  flowId: String!
  name: String!
  creator: User!
  createdAt: String!
  # permission to trigger first step of the flow
  requestStep0Permission: Permission!
  userPermission: UserFlowPermission!
}

type FlowReference {
  flowId: String!
  flowName: String!
}

enum FlowType {
  Custom
  Evolve
  GroupUpdateMetadata
}

type Step {
  id: String!
  index: Int!
  request: RequestConfig!
  response: ResponseConfig!
  result: [ResultConfig!]!
  action: Action
  expirationSeconds: Int
  allowMultipleResponses: Boolean!
  userPermission: UserPermission!
}

type RequestConfig {
  permission: Permission
  fields: [Field!]!
}

type ResponseConfig {
  permission: Permission
  fields: [Field!]!
}

type UserPermission {
  request: Boolean!
  response: Boolean!
}

type UserFlowPermission {
  request: Boolean!
}

input NewFlowArgs {
  name: String!
  reusable: Boolean!
  steps: [NewStepArgs!]!
  evolve: EvolveFlowArgs!
}

input NewStepArgs {
  request: StepRequestArgs
  response: StepResponseArgs
  result: [ResultArgs!]!
  action: ActionArgs
  expirationSeconds: Int
  allowMultipleResponses: Boolean!
}

input EvolveFlowArgs {
  requestPermission: PermissionArgs!
  responsePermission: PermissionArgs!
  decision: DecisionArgs!
}

input StepRequestArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
}

input StepResponseArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
}

input EntityArgs {
  id: String!
}
