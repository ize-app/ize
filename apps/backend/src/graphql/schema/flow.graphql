type Mutation {
  newFlow(flow: NewFlowArgs!): String!
}

type Query {
  getFlow(flowId: String!): Flow!
  getFlows: [FlowSummary!]!
}

type Flow {
  flowId: String!
  flowVersionId: String!
  type: FlowType!
  name: String!
  reusable: Boolean!
  steps: [Step]!
  evolve: Flow
}

type FlowSummary {
  flowId: String!
  name: String!
  creator: User!
  createdAt: String!
  # permission to trigger first step of the flow
  requestStep0Permission: Permission!
  userPermission: UserFlowPermission!
}

enum FlowType {
  Custom
  Evolve
}

type Step {
  index: Int!
  request: RequestConfig!
  response: ResponseConfig!
  result: [ResultConfig!]!
  action: Action
  expirationSeconds: Int
  userPermission: UserPermission!
}

type RequestConfig {
  permission: Permission!
  fields: [Field!]!
}

type ResponseConfig {
  permission: Permission!
  fields: [Field!]!
}

type UserPermission {
  request: Boolean!
  response: Boolean!
}

type UserFlowPermission {
  request: Boolean!
}

input NewFlowArgs {
  name: String!
  reusable: Boolean!
  steps: [NewStepArgs!]!
  evolve: EvolveFlowArgs!
}

input NewStepArgs {
  request: StepRequestArgs!
  response: StepResponseArgs
  result: [ResultArgs!]!
  action: ActionArgs!
  expirationSeconds: Int
}

input EvolveFlowArgs {
  requestPermission: PermissionArgs!
  responsePermission: PermissionArgs!
  decision: DecisionArgs!
}

input StepRequestArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
}

input StepResponseArgs {
  fields: [FieldArgs!]!
  permission: PermissionArgs!
}

input EntityArgs {
  id: String!
}
