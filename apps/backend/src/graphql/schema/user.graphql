type Query {
  me: Me
}

type Mutation {
  updateProfile(profile: UpdateProfileArgs!): Boolean!
  watchGroup(groupId: String!, watch: Boolean!): Boolean!
  watchFlow(flowId: String!, watch: Boolean!): Boolean!
}

type Me {
  user: User!
  identities: [Identity!]!
  groups: [Group!]!
  notifications: NotificationSettings
  hasGroupInvites: Boolean!
  hasWatchedGroup: Boolean!
  hasCreatedFlow: Boolean!
}

type NotificationSettings {
  transactional: Boolean!
  marketing: Boolean!
}

type User {
  id: String!
  entityId: String!
  name: String!
  icon: String
  createdAt: String!
}

input UpdateProfileArgs {
  name: String!
  notifications: UserNotificationsArgs!
}

input UserNotificationsArgs {
  transactional: Boolean!
  marketing: Boolean!
}

enum WatchFilter {
  All
  Watched
  Unwatched
}
