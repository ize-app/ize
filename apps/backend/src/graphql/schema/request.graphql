type Mutation {
  newRequest(request: NewRequestArgs!): String!
  newEvolveRequest(request: NewEvolveRequestArgs!): String!
  newResponse(response: NewResponseArgs!): String!
  endRequestStep(requestStepId: String!): Boolean!
}

type Query {
  getRequest(requestId: String!): Request!
  getRequests(
    cursor: String
    limit: Int!
    userOnly: Boolean!
    flowId: String
    groupId: String
    searchQuery: String!
    statusFilter: RequestStepStatusFilter!
    respondPermissionFilter: RequestStepRespondPermissionFilter!
  ): [RequestSummary!]!
}

input NewRequestArgs {
  requestId: String!
  flowId: String!
  name: String!
  requestFields: [FieldAnswerArgs!]!
  requestDefinedOptions: [RequestDefinedOptionsArgs!]!
}

input NewEvolveRequestArgs {
  flowId: String!
  name: String!
  description: String
  new: NewFlowWithEvolveArgs!
}

input RequestDefinedOptionsArgs {
  fieldId: String!
  options: [OptionArgs!]!
}

input NewResponseArgs {
  responseId: String!
  requestStepId: String!
  answers: [FieldAnswerArgs!]!
}

enum Status {
  NotAttempted
  InProgress
  Completed
  Failure
  Cancelled
}

enum RequestStepStatus {
  NotStarted
  CollectingResponses
  CreatingResult
  ExecutingAction
  Complete
  Error
}

enum RequestStepStatusFilter {
  All
  Open
  Closed
}

enum RequestStepRespondPermissionFilter {
  All
  RespondPermission
  NoRespondPermission
}

type Request {
  requestId: String!
  # refers to flow version at time of request, not necessarily the current flow
  name: String!
  flow: Flow!
  creator: Entity!
  requestId: String!
  currentStepIndex: Int!
  createdAt: String!
  triggerFieldAnswers: [TriggerFieldAnswer!]!
  triggerDefinedOptions: [TriggerDefinedOptions!]!
  final: Boolean!
  requestSteps: [RequestStep!]!
}

type TriggerContext {
  answers: [TriggerFieldAnswer!]!
  options: [TriggerDefinedOptions!]!
}

type TriggerDefinedOptions {
  fieldId: String!
  fieldName: String!
  options: [Option!]!
}

type RequestStep {
  requestStepId: String!
  stepId: String!
  createdAt: String!
  expirationDate: String!
  answers: [ResponseFieldAnswers!]!
  fieldSet: FieldSet!
  userResponded: Boolean!
  results: [ResultGroup!]!
  actionExecution: ActionExecution
  status: RequestStepStatuses!
}

type RequestSummary {
  requestId: String!
  flowId: String!
  requestName: String!
  flowName: String!
  creator: Entity!
  createdAt: String!
  status: Boolean!
  currentStep: RequestStepSummary!
}

type RequestStepSummary {
  requestStepId: String!
  status: RequestStepStatuses!
  expirationDate: String!
  action: RequestStepActionSummary
  respondPermission: Permission
  # note: Field set here is what's defined on the step. doesn't include options defined within a request
  fieldName: String!
  resultName: String!
  result: ResultGroup
  userRespondPermission: Boolean!
  userResponded: Boolean!
}
type RequestStepActionSummary {
  name: String!
  status: ActionStatus!
}

type GenericFieldWithSingleValue {
  fieldName: String!
  value: Value!
}

type GenericFieldWithMultipleValues {
  fieldName: String!
  value: [Value!]!
}

# used for stringified request data
union GenericFieldAndValue = GenericFieldWithSingleValue | GenericFieldWithMultipleValues

type RequestStepStatuses {
  responseFinal: Boolean!
  resultsFinal: Boolean!
  actionsFinal: Boolean!
  final: Boolean!
  status: RequestStepStatus!
}
