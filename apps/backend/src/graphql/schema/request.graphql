type Mutation {
  newRequest(request: NewRequestArgs!): String!
  newEvolveRequest(request: NewEvolveRequestArgs!): String!
  newResponse(response: NewResponseArgs!): String!
  endRequestStep(requestStepId: String!): Boolean!
}

type Query {
  getRequest(requestId: String!): Request!
  getRequestSteps(
    cursor: String
    limit: Int!
    userOnly: Boolean!
    flowId: String
    groupId: String
    searchQuery: String!
    statusFilter: RequestStepStatusFilter!
    respondPermissionFilter: RequestStepRespondPermissionFilter!
  ): [RequestStepSummary!]!
}

input NewRequestArgs {
  flowId: String!
  name: String!
  requestFields: [FieldAnswerArgs!]!
  requestDefinedOptions: [RequestDefinedOptionsArgs!]!
}

input NewEvolveRequestArgs {
  flowId: String!
  name: String!
  description: String
  new: NewFlowWithEvolveArgs!
}

input RequestDefinedOptionsArgs {
  fieldId: String!
  options: [FieldOptionArgs!]!
}

input NewResponseArgs {
  requestStepId: String!
  answers: [FieldAnswerArgs!]!
}

enum Status {
  NotAttempted
  InProgress
  Completed
  Failure
  Cancelled
}

enum RequestStepStatusFilter {
  All
  Open
  Closed
}

enum RequestStepRespondPermissionFilter {
  All
  RespondPermission
  NoRespondPermission
}

type Request {
  # refers to flow version at time of request, not necessarily the current flow
  name: String!
  flow: Flow!
  creator: Entity!
  requestId: String!
  currentStepIndex: Int!
  createdAt: String!
  triggerFieldAnswers: [FieldAnswer!]!
  final: Boolean!
  requestSteps: [RequestStep!]!
}

type RequestStep {
  requestStepId: String!
  createdAt: String!
  expirationDate: String!
  responseFieldAnswers: [UserFieldAnswers!]!
  fieldSet: FieldSet!
  userResponses: [Response!]!
  results: [ResultGroup!]!
  actionExecution: ActionExecution
  status: RequestStepStatus!
}

type RequestStepSummary {
  id: String! # same as requestStepId, might delete requestStepId later
  requestStepId: String!
  requestId: String!
  flowId: String!
  # user who triggered the first step of this request
  creator: Entity!
  requestName: String!
  respondPermission: Permission
  userRespondPermission: Boolean!
  userResponded: Boolean!
  flowName: String!
  stepIndex: Int!
  totalSteps: Int!
  createdAt: String!
  status: RequestStepStatus!
  expirationDate: String!
}

type Response {
  responseId: String!
  createdAt: String!
  creator: Entity!
  answers: [FieldAnswer!]!
}

type GenericFieldAndValue {
  fieldName: String!
  value: [String!]!
}

# type RequestPayload {
#   requestId: String!
#   requestName: String!
#   flowName: String!
#   triggerFieldAnswers: [FieldValue]!
#   results: [FieldValue]!
# }

type FieldValue {
  fieldName: String!
  value: String
  optionSelections: [String!]
}

type RequestStepStatus {
  responseFinal: Boolean!
  resultsFinal: Boolean!
  actionsFinal: Boolean!
  final: Boolean!
}
