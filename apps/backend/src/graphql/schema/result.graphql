type Result {
  id: String!
  createdAt: String!
  resultConfigId: String!
  hasResult: Boolean!
  resultItems: [ResultItem!]!
}

type ResultItem {
  id: String!
  dataType: FieldDataType!
  value: String!
  optionId: String
}

union ResultConfig = Decision | Ranking | LlmSummary

type Decision {
  resultConfigId: String!
  fieldId: String
  minimumAnswers: Int!
  decisionType: DecisionType!
  defaultOption: Option
  threshold: Int
}

type Ranking {
  resultConfigId: String!
  fieldId: String
  minimumAnswers: Int!
  numOptionsToInclude: Int
}

type LlmSummary {
  resultConfigId: String!
  fieldId: String
  minimumAnswers: Int!
  prompt: String
}

# mirrors Prisma type
enum ResultType {
  Decision
  Ranking
  LlmSummary
}

# mirrors Prisma type
enum DecisionType {
  NumberThreshold
  PercentageThreshold
  WeightedAverage
}

enum LlmSummaryType {
  AfterEveryResponse
  AtTheEnd
}

input ResultArgs {
  type: ResultType!
  resultId: String
  fieldId: String
  minimumAnswers: Int
  responseFieldIndex: Int!
  decision: DecisionArgs
  prioritization: PrioritizationArgs
  llmSummary: LlmSummaryArgs
}

input DecisionArgs {
  type: DecisionType!
  defaultOptionIndex: Int
  threshold: Int
}

input PrioritizationArgs {
  numPrioritizedItems: Int
}

input LlmSummaryArgs {
  prompt: String
}
