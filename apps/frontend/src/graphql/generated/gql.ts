/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "mutation TestWebhook($inputs: TestWebhookArgs!) {\n  testWebhook(inputs: $inputs)\n}\n\nfragment ActionExecution on ActionExecution {\n  actionId\n  lastAttemptedAt\n  status\n}\n\nfragment ActionFilter on ActionFilter {\n  resultConfigId\n  resultName\n  option {\n    ...Option\n  }\n}\n\nfragment Action on Action {\n  __typename\n  ... on CallWebhook {\n    ...CallWebhook\n  }\n  ... on EvolveFlow {\n    ...EvolveFlow\n  }\n  ... on EvolveGroup {\n    ...EvolveGroup\n  }\n  ... on TriggerStep {\n    ...TriggerStep\n  }\n  ... on GroupWatchFlow {\n    ...GroupWatchFlow\n  }\n}\n\nfragment CallWebhook on CallWebhook {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n  webhookId\n  uri\n  webhookName\n}\n\nfragment EvolveFlow on EvolveFlow {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}\n\nfragment TriggerStep on TriggerStep {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n  stepId\n}\n\nfragment GroupWatchFlow on GroupWatchFlow {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}\n\nfragment EvolveGroup on EvolveGroup {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}": types.TestWebhookDocument,
    "query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  chain\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}": types.NftContractDocument,
    "query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nquery GetDiscordServers {\n  getDiscordServers {\n    ...DiscordServerParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}": types.DiscordServerRolesDocument,
    "mutation NewEntities($entities: [NewEntityArgs!]!) {\n  newEntities(entities: $entities) {\n    ...Entity\n  }\n}\n\nmutation NewCustomGroup($inputs: CustomGroupArgs!) {\n  newCustomGroup(inputs: $inputs)\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...IzeGroup\n  }\n}\n\nquery Groups($cursor: String, $limit: Int!, $searchQuery: String!, $watchFilter: WatchFilter!) {\n  groupsForCurrentUser(\n    cursor: $cursor\n    limit: $limit\n    searchQuery: $searchQuery\n    watchFilter: $watchFilter\n  ) {\n    ...GroupSummaryParts\n  }\n}\n\nfragment Entity on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n  ... on User {\n    ...UserSummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  entityId\n  name\n  icon\n  memberCount\n  color\n  isWatched\n  isMember\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment IzeGroup on IzeGroup {\n  group {\n    ...GroupSummaryParts\n  }\n  members {\n    ...Entity\n  }\n  description\n  notificationEntity {\n    ...Entity\n  }\n  evolveGroupFlowId\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n  ... on GroupIze {\n    ...GroupIze\n  }\n  ... on GroupTelegramChat {\n    ...GroupTelegramChat\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment GroupIze on GroupIze {\n  id\n  name\n}\n\nfragment GroupTelegramChat on GroupTelegramChat {\n  id\n  name\n  icon\n  chatId\n  messageThreadId\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}\n\nfragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n}\n\nfragment IdentityTelegram on IdentityTelegram {\n  id\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n  ... on IdentityTelegram {\n    ...IdentityTelegram\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  entityId\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}": types.NewEntitiesDocument,
    "fragment FieldSet on FieldSet {\n  fields {\n    ...Field\n  }\n  locked\n}\n\nfragment Field on Field {\n  fieldId\n  name\n  type\n  isInternal\n  required\n  systemType\n  defaultAnswer {\n    ...Value\n  }\n  optionsConfig {\n    ...OptionsConfig\n  }\n}\n\nfragment OptionsConfig on OptionsConfig {\n  options {\n    ...Option\n  }\n  systemType\n  selectionType\n  maxSelections\n  linkedResultOptions {\n    ...LinkedResult\n  }\n  triggerOptionsType\n}\n\nfragment LinkedResult on LinkedResult {\n  resultConfigId\n  resultName\n  fieldId\n  fieldName\n}\n\nfragment Option on Option {\n  optionId\n  value {\n    ...Value\n  }\n}\n\nfragment UserFieldAnswer on UserFieldAnswer {\n  creator {\n    ...Entity\n  }\n  createdAt\n  answer {\n    ...Value\n  }\n}\n\nfragment TriggerFieldAnswer on TriggerFieldAnswer {\n  field {\n    ...Field\n  }\n  answer {\n    ...Value\n  }\n}\n\nfragment ResponseFieldAnswers on ResponseFieldAnswers {\n  field {\n    ...Field\n  }\n  answers {\n    ...UserFieldAnswer\n  }\n  summary {\n    ...ResponseFieldAnswersSummary\n  }\n}\n\nfragment ResponseFieldAnswersSummary on ResponseFieldAnswersSummary {\n  count\n  options {\n    ...ResponseFieldAnswersOptionsSummary\n  }\n}\n\nfragment ResponseFieldAnswersOptionsSummary on ResponseFieldAnswersOptionsSummary {\n  optionId\n  count\n  rank\n}": types.FieldSetFragmentDoc,
    "mutation NewFlow($new: NewFlowWithEvolveArgs!) {\n  newFlow(new: $new)\n}\n\nquery GetFlow($flowId: String, $flowVersionId: String, $isForEvolveRequest: Boolean) {\n  getFlow(\n    flowId: $flowId\n    flowVersionId: $flowVersionId\n    isForEvolveRequest: $isForEvolveRequest\n  ) {\n    ...Flow\n  }\n}\n\nquery GetFlows($cursor: String, $limit: Int!, $groupId: String, $searchQuery: String!, $watchedByUserGroups: Boolean!, $watchedByUser: Boolean!, $excludeGroupId: String, $createdByUser: Boolean!, $hasTriggerPermissions: Boolean!) {\n  getFlows(\n    cursor: $cursor\n    limit: $limit\n    groupId: $groupId\n    searchQuery: $searchQuery\n    watchedByUserGroups: $watchedByUserGroups\n    watchedByUser: $watchedByUser\n    hasTriggerPermissions: $hasTriggerPermissions\n    createdByUser: $createdByUser\n    excludeGroupId: $excludeGroupId\n  ) {\n    ...FlowSummary\n  }\n}\n\nfragment Flow on Flow {\n  ...FlowFields\n  evolve {\n    ...FlowFields\n  }\n}\n\nfragment FlowFields on Flow {\n  id\n  flowId\n  flowVersionId\n  currentFlowVersionId\n  group {\n    ...GroupSummaryParts\n  }\n  createdAt\n  versionCreatedAt\n  versionPublishedAt\n  active\n  flowsEvolvedByThisFlow {\n    ...FlowReference\n  }\n  type\n  name\n  reusable\n  fieldSet {\n    ...FieldSet\n  }\n  trigger {\n    ...TriggerConfig\n  }\n  steps {\n    ...Step\n  }\n  watching {\n    ...FlowWatchers\n  }\n}\n\nfragment FlowSummary on FlowSummary {\n  flowId\n  name\n  createdAt\n  creator {\n    ...Entity\n  }\n  group {\n    ...GroupSummaryParts\n  }\n  trigger {\n    ...TriggerConfig\n  }\n  watching {\n    ...FlowWatchers\n  }\n}\n\nfragment FlowReference on FlowReference {\n  flowId\n  flowVersionId\n  flowName\n}\n\nfragment Step on Step {\n  id\n  fieldSet {\n    ...FieldSet\n  }\n  response {\n    ...ResponseConfig\n  }\n  result {\n    ...ResultConfig\n  }\n  action {\n    ...Action\n  }\n}\n\nfragment TriggerConfig on TriggerConfig {\n  permission {\n    ...Permission\n  }\n  userPermission\n}\n\nfragment ResponseConfig on ResponseConfig {\n  permission {\n    ...Permission\n  }\n  expirationSeconds\n  canBeManuallyEnded\n  allowMultipleResponses\n  userPermission\n  minResponses\n}\n\nfragment FlowWatchers on FlowWatchers {\n  user\n  groups {\n    ...GroupSummaryParts\n  }\n}": types.NewFlowDocument,
    "fragment Permission on Permission {\n  anyone\n  entities {\n    ...Entity\n  }\n}": types.PermissionFragmentDoc,
    "mutation NewRequest($request: NewRequestArgs!) {\n  newRequest(request: $request)\n}\n\nmutation NewResponse($response: NewResponseArgs!) {\n  newResponse(response: $response)\n}\n\nmutation NewEvolveRequest($request: NewEvolveRequestArgs!) {\n  newEvolveRequest(request: $request)\n}\n\nquery getRequest($requestId: String!) {\n  getRequest(requestId: $requestId) {\n    ...Request\n  }\n}\n\nmutation EndRequestStep($requestStepId: String!) {\n  endRequestStep(requestStepId: $requestStepId)\n}\n\nquery getRequests($cursor: String, $limit: Int!, $userOnly: Boolean!, $flowId: String, $groupId: String, $searchQuery: String!, $statusFilter: RequestStepStatusFilter!, $respondPermissionFilter: RequestStepRespondPermissionFilter!) {\n  getRequests(\n    cursor: $cursor\n    limit: $limit\n    userOnly: $userOnly\n    flowId: $flowId\n    groupId: $groupId\n    searchQuery: $searchQuery\n    statusFilter: $statusFilter\n    respondPermissionFilter: $respondPermissionFilter\n  ) {\n    ...RequestSummary\n  }\n}\n\nfragment Request on Request {\n  name\n  creator {\n    ...Entity\n  }\n  flow {\n    ...Flow\n  }\n  triggerFieldAnswers {\n    ...TriggerFieldAnswer\n  }\n  triggerDefinedOptions {\n    ...TriggerDefinedOptions\n  }\n  requestId\n  currentStepIndex\n  createdAt\n  requestSteps {\n    ...RequestStep\n  }\n  final\n}\n\nfragment TriggerDefinedOptions on TriggerDefinedOptions {\n  fieldId\n  fieldName\n  options {\n    ...Option\n  }\n}\n\nfragment RequestStep on RequestStep {\n  requestStepId\n  createdAt\n  expirationDate\n  answers {\n    ...ResponseFieldAnswers\n  }\n  fieldSet {\n    ...FieldSet\n  }\n  results {\n    ...ResultGroup\n  }\n  actionExecution {\n    ...ActionExecution\n  }\n  status {\n    ...RequestStepStatuses\n  }\n  userResponded\n}\n\nfragment RequestSummary on RequestSummary {\n  requestId\n  flowId\n  requestName\n  flowName\n  creator {\n    ...Entity\n  }\n  createdAt\n  status\n  currentStep {\n    ...RequestStepSummary\n  }\n}\n\nfragment RequestStepSummary on RequestStepSummary {\n  requestStepId\n  status {\n    ...RequestStepStatuses\n  }\n  expirationDate\n  respondPermission {\n    ...Permission\n  }\n  fieldName\n  result {\n    ...ResultGroup\n  }\n  action {\n    ...RequestStepActionSummary\n  }\n  userRespondPermission\n  userResponded\n}\n\nfragment RequestStepStatuses on RequestStepStatuses {\n  responseFinal\n  resultsFinal\n  actionsFinal\n  final\n  status\n}\n\nfragment RequestStepActionSummary on RequestStepActionSummary {\n  name\n  status\n}": types.NewRequestDocument,
    "fragment ResultConfig on ResultConfig {\n  __typename\n  ... on Decision {\n    ...Decision\n  }\n  ... on Ranking {\n    ...Ranking\n  }\n  ... on LlmSummary {\n    ...LlmSummary\n  }\n  ... on RawAnswers {\n    ...RawAnswers\n  }\n}\n\nfragment ResultGroup on ResultGroup {\n  id\n  createdAt\n  resultConfigId\n  complete\n  status\n  results {\n    ...Result\n  }\n}\n\nfragment Result on Result {\n  id\n  name\n  type\n  resultItems {\n    ...ResultItem\n  }\n}\n\nfragment ResultItem on ResultItem {\n  id\n  value {\n    ...Value\n  }\n  optionId\n}\n\nfragment Decision on Decision {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  decisionType\n  criteria\n  defaultOption {\n    ...Option\n  }\n  threshold\n}\n\nfragment Ranking on Ranking {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  numOptionsToInclude\n}\n\nfragment LlmSummary on LlmSummary {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  prompt\n  isList\n}\n\nfragment RawAnswers on RawAnswers {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n}": types.ResultConfigFragmentDoc,
    "query TelegramChats($adminOnly: Boolean!) {\n  telegramChats(adminOnly: $adminOnly) {\n    ...Entity\n  }\n}": types.TelegramChatsDocument,
    "query Me {\n  me {\n    ...MeParts\n  }\n}\n\nmutation UpdateProfile($profile: UpdateProfileArgs!) {\n  updateProfile(profile: $profile)\n}\n\nmutation WatchGroup($groupId: String!, $watch: Boolean!) {\n  watchGroup(groupId: $groupId, watch: $watch)\n}\n\nmutation WatchFlow($flowId: String!, $watch: Boolean!) {\n  watchFlow(flowId: $flowId, watch: $watch)\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n  groups {\n    ...GroupSummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  entityId\n  createdAt\n}": types.MeDocument,
    "fragment Value on Value {\n  __typename\n  ... on OptionSelectionsValue {\n    ...OptionSelectionsValue\n  }\n  ... on StringValue {\n    ...StringValue\n  }\n  ... on FloatValue {\n    ...FloatValue\n  }\n  ... on UriValue {\n    ...UriValue\n  }\n  ... on DateValue {\n    ...DateValue\n  }\n  ... on DateTimeValue {\n    ...DateTimeValue\n  }\n  ... on EntitiesValue {\n    ...EntitiesValue\n  }\n  ... on FlowsValue {\n    ...FlowsValue\n  }\n  ... on FlowVersionValue {\n    ...FlowVersionValue\n  }\n}\n\nfragment OptionValue on Value {\n  __typename\n  ... on StringValue {\n    ...StringValue\n  }\n  ... on FloatValue {\n    ...FloatValue\n  }\n  ... on UriValue {\n    ...UriValue\n  }\n  ... on DateValue {\n    ...DateValue\n  }\n  ... on DateTimeValue {\n    ...DateTimeValue\n  }\n  ... on EntitiesValue {\n    ...EntitiesValue\n  }\n  ... on FlowsValue {\n    ...FlowsValue\n  }\n  ... on FlowVersionValue {\n    ...FlowVersionValue\n  }\n}\n\nfragment OptionSelectionsValue on OptionSelectionsValue {\n  selections {\n    ...OptionSelection\n  }\n}\n\nfragment OptionSelection on OptionSelection {\n  optionId\n  weight\n  value {\n    ...OptionValue\n  }\n}\n\nfragment StringValue on StringValue {\n  value\n}\n\nfragment FloatValue on FloatValue {\n  float\n}\n\nfragment UriValue on UriValue {\n  uri\n}\n\nfragment DateValue on DateValue {\n  date\n}\n\nfragment DateTimeValue on DateTimeValue {\n  dateTime\n}\n\nfragment EntitiesValue on EntitiesValue {\n  entities {\n    ...Entity\n  }\n}\n\nfragment FlowsValue on FlowsValue {\n  flows {\n    ...FlowReference\n  }\n}\n\nfragment FlowVersionValue on FlowVersionValue {\n  flowVersion {\n    ...FlowReference\n  }\n}": types.ValueFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation TestWebhook($inputs: TestWebhookArgs!) {\n  testWebhook(inputs: $inputs)\n}\n\nfragment ActionExecution on ActionExecution {\n  actionId\n  lastAttemptedAt\n  status\n}\n\nfragment ActionFilter on ActionFilter {\n  resultConfigId\n  resultName\n  option {\n    ...Option\n  }\n}\n\nfragment Action on Action {\n  __typename\n  ... on CallWebhook {\n    ...CallWebhook\n  }\n  ... on EvolveFlow {\n    ...EvolveFlow\n  }\n  ... on EvolveGroup {\n    ...EvolveGroup\n  }\n  ... on TriggerStep {\n    ...TriggerStep\n  }\n  ... on GroupWatchFlow {\n    ...GroupWatchFlow\n  }\n}\n\nfragment CallWebhook on CallWebhook {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n  webhookId\n  uri\n  webhookName\n}\n\nfragment EvolveFlow on EvolveFlow {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}\n\nfragment TriggerStep on TriggerStep {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n  stepId\n}\n\nfragment GroupWatchFlow on GroupWatchFlow {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}\n\nfragment EvolveGroup on EvolveGroup {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}"): (typeof documents)["mutation TestWebhook($inputs: TestWebhookArgs!) {\n  testWebhook(inputs: $inputs)\n}\n\nfragment ActionExecution on ActionExecution {\n  actionId\n  lastAttemptedAt\n  status\n}\n\nfragment ActionFilter on ActionFilter {\n  resultConfigId\n  resultName\n  option {\n    ...Option\n  }\n}\n\nfragment Action on Action {\n  __typename\n  ... on CallWebhook {\n    ...CallWebhook\n  }\n  ... on EvolveFlow {\n    ...EvolveFlow\n  }\n  ... on EvolveGroup {\n    ...EvolveGroup\n  }\n  ... on TriggerStep {\n    ...TriggerStep\n  }\n  ... on GroupWatchFlow {\n    ...GroupWatchFlow\n  }\n}\n\nfragment CallWebhook on CallWebhook {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n  webhookId\n  uri\n  webhookName\n}\n\nfragment EvolveFlow on EvolveFlow {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}\n\nfragment TriggerStep on TriggerStep {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n  stepId\n}\n\nfragment GroupWatchFlow on GroupWatchFlow {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}\n\nfragment EvolveGroup on EvolveGroup {\n  name\n  locked\n  filter {\n    ...ActionFilter\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  chain\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}"): (typeof documents)["query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  chain\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nquery GetDiscordServers {\n  getDiscordServers {\n    ...DiscordServerParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}"): (typeof documents)["query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nquery GetDiscordServers {\n  getDiscordServers {\n    ...DiscordServerParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewEntities($entities: [NewEntityArgs!]!) {\n  newEntities(entities: $entities) {\n    ...Entity\n  }\n}\n\nmutation NewCustomGroup($inputs: CustomGroupArgs!) {\n  newCustomGroup(inputs: $inputs)\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...IzeGroup\n  }\n}\n\nquery Groups($cursor: String, $limit: Int!, $searchQuery: String!, $watchFilter: WatchFilter!) {\n  groupsForCurrentUser(\n    cursor: $cursor\n    limit: $limit\n    searchQuery: $searchQuery\n    watchFilter: $watchFilter\n  ) {\n    ...GroupSummaryParts\n  }\n}\n\nfragment Entity on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n  ... on User {\n    ...UserSummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  entityId\n  name\n  icon\n  memberCount\n  color\n  isWatched\n  isMember\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment IzeGroup on IzeGroup {\n  group {\n    ...GroupSummaryParts\n  }\n  members {\n    ...Entity\n  }\n  description\n  notificationEntity {\n    ...Entity\n  }\n  evolveGroupFlowId\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n  ... on GroupIze {\n    ...GroupIze\n  }\n  ... on GroupTelegramChat {\n    ...GroupTelegramChat\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment GroupIze on GroupIze {\n  id\n  name\n}\n\nfragment GroupTelegramChat on GroupTelegramChat {\n  id\n  name\n  icon\n  chatId\n  messageThreadId\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}\n\nfragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n}\n\nfragment IdentityTelegram on IdentityTelegram {\n  id\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n  ... on IdentityTelegram {\n    ...IdentityTelegram\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  entityId\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}"): (typeof documents)["mutation NewEntities($entities: [NewEntityArgs!]!) {\n  newEntities(entities: $entities) {\n    ...Entity\n  }\n}\n\nmutation NewCustomGroup($inputs: CustomGroupArgs!) {\n  newCustomGroup(inputs: $inputs)\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...IzeGroup\n  }\n}\n\nquery Groups($cursor: String, $limit: Int!, $searchQuery: String!, $watchFilter: WatchFilter!) {\n  groupsForCurrentUser(\n    cursor: $cursor\n    limit: $limit\n    searchQuery: $searchQuery\n    watchFilter: $watchFilter\n  ) {\n    ...GroupSummaryParts\n  }\n}\n\nfragment Entity on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n  ... on User {\n    ...UserSummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  entityId\n  name\n  icon\n  memberCount\n  color\n  isWatched\n  isMember\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment IzeGroup on IzeGroup {\n  group {\n    ...GroupSummaryParts\n  }\n  members {\n    ...Entity\n  }\n  description\n  notificationEntity {\n    ...Entity\n  }\n  evolveGroupFlowId\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n  ... on GroupIze {\n    ...GroupIze\n  }\n  ... on GroupTelegramChat {\n    ...GroupTelegramChat\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment GroupIze on GroupIze {\n  id\n  name\n}\n\nfragment GroupTelegramChat on GroupTelegramChat {\n  id\n  name\n  icon\n  chatId\n  messageThreadId\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}\n\nfragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n}\n\nfragment IdentityTelegram on IdentityTelegram {\n  id\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n  ... on IdentityTelegram {\n    ...IdentityTelegram\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  entityId\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FieldSet on FieldSet {\n  fields {\n    ...Field\n  }\n  locked\n}\n\nfragment Field on Field {\n  fieldId\n  name\n  type\n  isInternal\n  required\n  systemType\n  defaultAnswer {\n    ...Value\n  }\n  optionsConfig {\n    ...OptionsConfig\n  }\n}\n\nfragment OptionsConfig on OptionsConfig {\n  options {\n    ...Option\n  }\n  systemType\n  selectionType\n  maxSelections\n  linkedResultOptions {\n    ...LinkedResult\n  }\n  triggerOptionsType\n}\n\nfragment LinkedResult on LinkedResult {\n  resultConfigId\n  resultName\n  fieldId\n  fieldName\n}\n\nfragment Option on Option {\n  optionId\n  value {\n    ...Value\n  }\n}\n\nfragment UserFieldAnswer on UserFieldAnswer {\n  creator {\n    ...Entity\n  }\n  createdAt\n  answer {\n    ...Value\n  }\n}\n\nfragment TriggerFieldAnswer on TriggerFieldAnswer {\n  field {\n    ...Field\n  }\n  answer {\n    ...Value\n  }\n}\n\nfragment ResponseFieldAnswers on ResponseFieldAnswers {\n  field {\n    ...Field\n  }\n  answers {\n    ...UserFieldAnswer\n  }\n  summary {\n    ...ResponseFieldAnswersSummary\n  }\n}\n\nfragment ResponseFieldAnswersSummary on ResponseFieldAnswersSummary {\n  count\n  options {\n    ...ResponseFieldAnswersOptionsSummary\n  }\n}\n\nfragment ResponseFieldAnswersOptionsSummary on ResponseFieldAnswersOptionsSummary {\n  optionId\n  count\n  rank\n}"): (typeof documents)["fragment FieldSet on FieldSet {\n  fields {\n    ...Field\n  }\n  locked\n}\n\nfragment Field on Field {\n  fieldId\n  name\n  type\n  isInternal\n  required\n  systemType\n  defaultAnswer {\n    ...Value\n  }\n  optionsConfig {\n    ...OptionsConfig\n  }\n}\n\nfragment OptionsConfig on OptionsConfig {\n  options {\n    ...Option\n  }\n  systemType\n  selectionType\n  maxSelections\n  linkedResultOptions {\n    ...LinkedResult\n  }\n  triggerOptionsType\n}\n\nfragment LinkedResult on LinkedResult {\n  resultConfigId\n  resultName\n  fieldId\n  fieldName\n}\n\nfragment Option on Option {\n  optionId\n  value {\n    ...Value\n  }\n}\n\nfragment UserFieldAnswer on UserFieldAnswer {\n  creator {\n    ...Entity\n  }\n  createdAt\n  answer {\n    ...Value\n  }\n}\n\nfragment TriggerFieldAnswer on TriggerFieldAnswer {\n  field {\n    ...Field\n  }\n  answer {\n    ...Value\n  }\n}\n\nfragment ResponseFieldAnswers on ResponseFieldAnswers {\n  field {\n    ...Field\n  }\n  answers {\n    ...UserFieldAnswer\n  }\n  summary {\n    ...ResponseFieldAnswersSummary\n  }\n}\n\nfragment ResponseFieldAnswersSummary on ResponseFieldAnswersSummary {\n  count\n  options {\n    ...ResponseFieldAnswersOptionsSummary\n  }\n}\n\nfragment ResponseFieldAnswersOptionsSummary on ResponseFieldAnswersOptionsSummary {\n  optionId\n  count\n  rank\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewFlow($new: NewFlowWithEvolveArgs!) {\n  newFlow(new: $new)\n}\n\nquery GetFlow($flowId: String, $flowVersionId: String, $isForEvolveRequest: Boolean) {\n  getFlow(\n    flowId: $flowId\n    flowVersionId: $flowVersionId\n    isForEvolveRequest: $isForEvolveRequest\n  ) {\n    ...Flow\n  }\n}\n\nquery GetFlows($cursor: String, $limit: Int!, $groupId: String, $searchQuery: String!, $watchedByUserGroups: Boolean!, $watchedByUser: Boolean!, $excludeGroupId: String, $createdByUser: Boolean!, $hasTriggerPermissions: Boolean!) {\n  getFlows(\n    cursor: $cursor\n    limit: $limit\n    groupId: $groupId\n    searchQuery: $searchQuery\n    watchedByUserGroups: $watchedByUserGroups\n    watchedByUser: $watchedByUser\n    hasTriggerPermissions: $hasTriggerPermissions\n    createdByUser: $createdByUser\n    excludeGroupId: $excludeGroupId\n  ) {\n    ...FlowSummary\n  }\n}\n\nfragment Flow on Flow {\n  ...FlowFields\n  evolve {\n    ...FlowFields\n  }\n}\n\nfragment FlowFields on Flow {\n  id\n  flowId\n  flowVersionId\n  currentFlowVersionId\n  group {\n    ...GroupSummaryParts\n  }\n  createdAt\n  versionCreatedAt\n  versionPublishedAt\n  active\n  flowsEvolvedByThisFlow {\n    ...FlowReference\n  }\n  type\n  name\n  reusable\n  fieldSet {\n    ...FieldSet\n  }\n  trigger {\n    ...TriggerConfig\n  }\n  steps {\n    ...Step\n  }\n  watching {\n    ...FlowWatchers\n  }\n}\n\nfragment FlowSummary on FlowSummary {\n  flowId\n  name\n  createdAt\n  creator {\n    ...Entity\n  }\n  group {\n    ...GroupSummaryParts\n  }\n  trigger {\n    ...TriggerConfig\n  }\n  watching {\n    ...FlowWatchers\n  }\n}\n\nfragment FlowReference on FlowReference {\n  flowId\n  flowVersionId\n  flowName\n}\n\nfragment Step on Step {\n  id\n  fieldSet {\n    ...FieldSet\n  }\n  response {\n    ...ResponseConfig\n  }\n  result {\n    ...ResultConfig\n  }\n  action {\n    ...Action\n  }\n}\n\nfragment TriggerConfig on TriggerConfig {\n  permission {\n    ...Permission\n  }\n  userPermission\n}\n\nfragment ResponseConfig on ResponseConfig {\n  permission {\n    ...Permission\n  }\n  expirationSeconds\n  canBeManuallyEnded\n  allowMultipleResponses\n  userPermission\n  minResponses\n}\n\nfragment FlowWatchers on FlowWatchers {\n  user\n  groups {\n    ...GroupSummaryParts\n  }\n}"): (typeof documents)["mutation NewFlow($new: NewFlowWithEvolveArgs!) {\n  newFlow(new: $new)\n}\n\nquery GetFlow($flowId: String, $flowVersionId: String, $isForEvolveRequest: Boolean) {\n  getFlow(\n    flowId: $flowId\n    flowVersionId: $flowVersionId\n    isForEvolveRequest: $isForEvolveRequest\n  ) {\n    ...Flow\n  }\n}\n\nquery GetFlows($cursor: String, $limit: Int!, $groupId: String, $searchQuery: String!, $watchedByUserGroups: Boolean!, $watchedByUser: Boolean!, $excludeGroupId: String, $createdByUser: Boolean!, $hasTriggerPermissions: Boolean!) {\n  getFlows(\n    cursor: $cursor\n    limit: $limit\n    groupId: $groupId\n    searchQuery: $searchQuery\n    watchedByUserGroups: $watchedByUserGroups\n    watchedByUser: $watchedByUser\n    hasTriggerPermissions: $hasTriggerPermissions\n    createdByUser: $createdByUser\n    excludeGroupId: $excludeGroupId\n  ) {\n    ...FlowSummary\n  }\n}\n\nfragment Flow on Flow {\n  ...FlowFields\n  evolve {\n    ...FlowFields\n  }\n}\n\nfragment FlowFields on Flow {\n  id\n  flowId\n  flowVersionId\n  currentFlowVersionId\n  group {\n    ...GroupSummaryParts\n  }\n  createdAt\n  versionCreatedAt\n  versionPublishedAt\n  active\n  flowsEvolvedByThisFlow {\n    ...FlowReference\n  }\n  type\n  name\n  reusable\n  fieldSet {\n    ...FieldSet\n  }\n  trigger {\n    ...TriggerConfig\n  }\n  steps {\n    ...Step\n  }\n  watching {\n    ...FlowWatchers\n  }\n}\n\nfragment FlowSummary on FlowSummary {\n  flowId\n  name\n  createdAt\n  creator {\n    ...Entity\n  }\n  group {\n    ...GroupSummaryParts\n  }\n  trigger {\n    ...TriggerConfig\n  }\n  watching {\n    ...FlowWatchers\n  }\n}\n\nfragment FlowReference on FlowReference {\n  flowId\n  flowVersionId\n  flowName\n}\n\nfragment Step on Step {\n  id\n  fieldSet {\n    ...FieldSet\n  }\n  response {\n    ...ResponseConfig\n  }\n  result {\n    ...ResultConfig\n  }\n  action {\n    ...Action\n  }\n}\n\nfragment TriggerConfig on TriggerConfig {\n  permission {\n    ...Permission\n  }\n  userPermission\n}\n\nfragment ResponseConfig on ResponseConfig {\n  permission {\n    ...Permission\n  }\n  expirationSeconds\n  canBeManuallyEnded\n  allowMultipleResponses\n  userPermission\n  minResponses\n}\n\nfragment FlowWatchers on FlowWatchers {\n  user\n  groups {\n    ...GroupSummaryParts\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Permission on Permission {\n  anyone\n  entities {\n    ...Entity\n  }\n}"): (typeof documents)["fragment Permission on Permission {\n  anyone\n  entities {\n    ...Entity\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewRequest($request: NewRequestArgs!) {\n  newRequest(request: $request)\n}\n\nmutation NewResponse($response: NewResponseArgs!) {\n  newResponse(response: $response)\n}\n\nmutation NewEvolveRequest($request: NewEvolveRequestArgs!) {\n  newEvolveRequest(request: $request)\n}\n\nquery getRequest($requestId: String!) {\n  getRequest(requestId: $requestId) {\n    ...Request\n  }\n}\n\nmutation EndRequestStep($requestStepId: String!) {\n  endRequestStep(requestStepId: $requestStepId)\n}\n\nquery getRequests($cursor: String, $limit: Int!, $userOnly: Boolean!, $flowId: String, $groupId: String, $searchQuery: String!, $statusFilter: RequestStepStatusFilter!, $respondPermissionFilter: RequestStepRespondPermissionFilter!) {\n  getRequests(\n    cursor: $cursor\n    limit: $limit\n    userOnly: $userOnly\n    flowId: $flowId\n    groupId: $groupId\n    searchQuery: $searchQuery\n    statusFilter: $statusFilter\n    respondPermissionFilter: $respondPermissionFilter\n  ) {\n    ...RequestSummary\n  }\n}\n\nfragment Request on Request {\n  name\n  creator {\n    ...Entity\n  }\n  flow {\n    ...Flow\n  }\n  triggerFieldAnswers {\n    ...TriggerFieldAnswer\n  }\n  triggerDefinedOptions {\n    ...TriggerDefinedOptions\n  }\n  requestId\n  currentStepIndex\n  createdAt\n  requestSteps {\n    ...RequestStep\n  }\n  final\n}\n\nfragment TriggerDefinedOptions on TriggerDefinedOptions {\n  fieldId\n  fieldName\n  options {\n    ...Option\n  }\n}\n\nfragment RequestStep on RequestStep {\n  requestStepId\n  createdAt\n  expirationDate\n  answers {\n    ...ResponseFieldAnswers\n  }\n  fieldSet {\n    ...FieldSet\n  }\n  results {\n    ...ResultGroup\n  }\n  actionExecution {\n    ...ActionExecution\n  }\n  status {\n    ...RequestStepStatuses\n  }\n  userResponded\n}\n\nfragment RequestSummary on RequestSummary {\n  requestId\n  flowId\n  requestName\n  flowName\n  creator {\n    ...Entity\n  }\n  createdAt\n  status\n  currentStep {\n    ...RequestStepSummary\n  }\n}\n\nfragment RequestStepSummary on RequestStepSummary {\n  requestStepId\n  status {\n    ...RequestStepStatuses\n  }\n  expirationDate\n  respondPermission {\n    ...Permission\n  }\n  fieldName\n  result {\n    ...ResultGroup\n  }\n  action {\n    ...RequestStepActionSummary\n  }\n  userRespondPermission\n  userResponded\n}\n\nfragment RequestStepStatuses on RequestStepStatuses {\n  responseFinal\n  resultsFinal\n  actionsFinal\n  final\n  status\n}\n\nfragment RequestStepActionSummary on RequestStepActionSummary {\n  name\n  status\n}"): (typeof documents)["mutation NewRequest($request: NewRequestArgs!) {\n  newRequest(request: $request)\n}\n\nmutation NewResponse($response: NewResponseArgs!) {\n  newResponse(response: $response)\n}\n\nmutation NewEvolveRequest($request: NewEvolveRequestArgs!) {\n  newEvolveRequest(request: $request)\n}\n\nquery getRequest($requestId: String!) {\n  getRequest(requestId: $requestId) {\n    ...Request\n  }\n}\n\nmutation EndRequestStep($requestStepId: String!) {\n  endRequestStep(requestStepId: $requestStepId)\n}\n\nquery getRequests($cursor: String, $limit: Int!, $userOnly: Boolean!, $flowId: String, $groupId: String, $searchQuery: String!, $statusFilter: RequestStepStatusFilter!, $respondPermissionFilter: RequestStepRespondPermissionFilter!) {\n  getRequests(\n    cursor: $cursor\n    limit: $limit\n    userOnly: $userOnly\n    flowId: $flowId\n    groupId: $groupId\n    searchQuery: $searchQuery\n    statusFilter: $statusFilter\n    respondPermissionFilter: $respondPermissionFilter\n  ) {\n    ...RequestSummary\n  }\n}\n\nfragment Request on Request {\n  name\n  creator {\n    ...Entity\n  }\n  flow {\n    ...Flow\n  }\n  triggerFieldAnswers {\n    ...TriggerFieldAnswer\n  }\n  triggerDefinedOptions {\n    ...TriggerDefinedOptions\n  }\n  requestId\n  currentStepIndex\n  createdAt\n  requestSteps {\n    ...RequestStep\n  }\n  final\n}\n\nfragment TriggerDefinedOptions on TriggerDefinedOptions {\n  fieldId\n  fieldName\n  options {\n    ...Option\n  }\n}\n\nfragment RequestStep on RequestStep {\n  requestStepId\n  createdAt\n  expirationDate\n  answers {\n    ...ResponseFieldAnswers\n  }\n  fieldSet {\n    ...FieldSet\n  }\n  results {\n    ...ResultGroup\n  }\n  actionExecution {\n    ...ActionExecution\n  }\n  status {\n    ...RequestStepStatuses\n  }\n  userResponded\n}\n\nfragment RequestSummary on RequestSummary {\n  requestId\n  flowId\n  requestName\n  flowName\n  creator {\n    ...Entity\n  }\n  createdAt\n  status\n  currentStep {\n    ...RequestStepSummary\n  }\n}\n\nfragment RequestStepSummary on RequestStepSummary {\n  requestStepId\n  status {\n    ...RequestStepStatuses\n  }\n  expirationDate\n  respondPermission {\n    ...Permission\n  }\n  fieldName\n  result {\n    ...ResultGroup\n  }\n  action {\n    ...RequestStepActionSummary\n  }\n  userRespondPermission\n  userResponded\n}\n\nfragment RequestStepStatuses on RequestStepStatuses {\n  responseFinal\n  resultsFinal\n  actionsFinal\n  final\n  status\n}\n\nfragment RequestStepActionSummary on RequestStepActionSummary {\n  name\n  status\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ResultConfig on ResultConfig {\n  __typename\n  ... on Decision {\n    ...Decision\n  }\n  ... on Ranking {\n    ...Ranking\n  }\n  ... on LlmSummary {\n    ...LlmSummary\n  }\n  ... on RawAnswers {\n    ...RawAnswers\n  }\n}\n\nfragment ResultGroup on ResultGroup {\n  id\n  createdAt\n  resultConfigId\n  complete\n  status\n  results {\n    ...Result\n  }\n}\n\nfragment Result on Result {\n  id\n  name\n  type\n  resultItems {\n    ...ResultItem\n  }\n}\n\nfragment ResultItem on ResultItem {\n  id\n  value {\n    ...Value\n  }\n  optionId\n}\n\nfragment Decision on Decision {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  decisionType\n  criteria\n  defaultOption {\n    ...Option\n  }\n  threshold\n}\n\nfragment Ranking on Ranking {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  numOptionsToInclude\n}\n\nfragment LlmSummary on LlmSummary {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  prompt\n  isList\n}\n\nfragment RawAnswers on RawAnswers {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n}"): (typeof documents)["fragment ResultConfig on ResultConfig {\n  __typename\n  ... on Decision {\n    ...Decision\n  }\n  ... on Ranking {\n    ...Ranking\n  }\n  ... on LlmSummary {\n    ...LlmSummary\n  }\n  ... on RawAnswers {\n    ...RawAnswers\n  }\n}\n\nfragment ResultGroup on ResultGroup {\n  id\n  createdAt\n  resultConfigId\n  complete\n  status\n  results {\n    ...Result\n  }\n}\n\nfragment Result on Result {\n  id\n  name\n  type\n  resultItems {\n    ...ResultItem\n  }\n}\n\nfragment ResultItem on ResultItem {\n  id\n  value {\n    ...Value\n  }\n  optionId\n}\n\nfragment Decision on Decision {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  decisionType\n  criteria\n  defaultOption {\n    ...Option\n  }\n  threshold\n}\n\nfragment Ranking on Ranking {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  numOptionsToInclude\n}\n\nfragment LlmSummary on LlmSummary {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n  prompt\n  isList\n}\n\nfragment RawAnswers on RawAnswers {\n  field {\n    ...Field\n  }\n  name\n  resultConfigId\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TelegramChats($adminOnly: Boolean!) {\n  telegramChats(adminOnly: $adminOnly) {\n    ...Entity\n  }\n}"): (typeof documents)["query TelegramChats($adminOnly: Boolean!) {\n  telegramChats(adminOnly: $adminOnly) {\n    ...Entity\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Me {\n  me {\n    ...MeParts\n  }\n}\n\nmutation UpdateProfile($profile: UpdateProfileArgs!) {\n  updateProfile(profile: $profile)\n}\n\nmutation WatchGroup($groupId: String!, $watch: Boolean!) {\n  watchGroup(groupId: $groupId, watch: $watch)\n}\n\nmutation WatchFlow($flowId: String!, $watch: Boolean!) {\n  watchFlow(flowId: $flowId, watch: $watch)\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n  groups {\n    ...GroupSummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  entityId\n  createdAt\n}"): (typeof documents)["query Me {\n  me {\n    ...MeParts\n  }\n}\n\nmutation UpdateProfile($profile: UpdateProfileArgs!) {\n  updateProfile(profile: $profile)\n}\n\nmutation WatchGroup($groupId: String!, $watch: Boolean!) {\n  watchGroup(groupId: $groupId, watch: $watch)\n}\n\nmutation WatchFlow($flowId: String!, $watch: Boolean!) {\n  watchFlow(flowId: $flowId, watch: $watch)\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n  groups {\n    ...GroupSummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  entityId\n  createdAt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Value on Value {\n  __typename\n  ... on OptionSelectionsValue {\n    ...OptionSelectionsValue\n  }\n  ... on StringValue {\n    ...StringValue\n  }\n  ... on FloatValue {\n    ...FloatValue\n  }\n  ... on UriValue {\n    ...UriValue\n  }\n  ... on DateValue {\n    ...DateValue\n  }\n  ... on DateTimeValue {\n    ...DateTimeValue\n  }\n  ... on EntitiesValue {\n    ...EntitiesValue\n  }\n  ... on FlowsValue {\n    ...FlowsValue\n  }\n  ... on FlowVersionValue {\n    ...FlowVersionValue\n  }\n}\n\nfragment OptionValue on Value {\n  __typename\n  ... on StringValue {\n    ...StringValue\n  }\n  ... on FloatValue {\n    ...FloatValue\n  }\n  ... on UriValue {\n    ...UriValue\n  }\n  ... on DateValue {\n    ...DateValue\n  }\n  ... on DateTimeValue {\n    ...DateTimeValue\n  }\n  ... on EntitiesValue {\n    ...EntitiesValue\n  }\n  ... on FlowsValue {\n    ...FlowsValue\n  }\n  ... on FlowVersionValue {\n    ...FlowVersionValue\n  }\n}\n\nfragment OptionSelectionsValue on OptionSelectionsValue {\n  selections {\n    ...OptionSelection\n  }\n}\n\nfragment OptionSelection on OptionSelection {\n  optionId\n  weight\n  value {\n    ...OptionValue\n  }\n}\n\nfragment StringValue on StringValue {\n  value\n}\n\nfragment FloatValue on FloatValue {\n  float\n}\n\nfragment UriValue on UriValue {\n  uri\n}\n\nfragment DateValue on DateValue {\n  date\n}\n\nfragment DateTimeValue on DateTimeValue {\n  dateTime\n}\n\nfragment EntitiesValue on EntitiesValue {\n  entities {\n    ...Entity\n  }\n}\n\nfragment FlowsValue on FlowsValue {\n  flows {\n    ...FlowReference\n  }\n}\n\nfragment FlowVersionValue on FlowVersionValue {\n  flowVersion {\n    ...FlowReference\n  }\n}"): (typeof documents)["fragment Value on Value {\n  __typename\n  ... on OptionSelectionsValue {\n    ...OptionSelectionsValue\n  }\n  ... on StringValue {\n    ...StringValue\n  }\n  ... on FloatValue {\n    ...FloatValue\n  }\n  ... on UriValue {\n    ...UriValue\n  }\n  ... on DateValue {\n    ...DateValue\n  }\n  ... on DateTimeValue {\n    ...DateTimeValue\n  }\n  ... on EntitiesValue {\n    ...EntitiesValue\n  }\n  ... on FlowsValue {\n    ...FlowsValue\n  }\n  ... on FlowVersionValue {\n    ...FlowVersionValue\n  }\n}\n\nfragment OptionValue on Value {\n  __typename\n  ... on StringValue {\n    ...StringValue\n  }\n  ... on FloatValue {\n    ...FloatValue\n  }\n  ... on UriValue {\n    ...UriValue\n  }\n  ... on DateValue {\n    ...DateValue\n  }\n  ... on DateTimeValue {\n    ...DateTimeValue\n  }\n  ... on EntitiesValue {\n    ...EntitiesValue\n  }\n  ... on FlowsValue {\n    ...FlowsValue\n  }\n  ... on FlowVersionValue {\n    ...FlowVersionValue\n  }\n}\n\nfragment OptionSelectionsValue on OptionSelectionsValue {\n  selections {\n    ...OptionSelection\n  }\n}\n\nfragment OptionSelection on OptionSelection {\n  optionId\n  weight\n  value {\n    ...OptionValue\n  }\n}\n\nfragment StringValue on StringValue {\n  value\n}\n\nfragment FloatValue on FloatValue {\n  float\n}\n\nfragment UriValue on UriValue {\n  uri\n}\n\nfragment DateValue on DateValue {\n  date\n}\n\nfragment DateTimeValue on DateTimeValue {\n  dateTime\n}\n\nfragment EntitiesValue on EntitiesValue {\n  entities {\n    ...Entity\n  }\n}\n\nfragment FlowsValue on FlowsValue {\n  flows {\n    ...FlowReference\n  }\n}\n\nfragment FlowVersionValue on FlowVersionValue {\n  flowVersion {\n    ...FlowReference\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;