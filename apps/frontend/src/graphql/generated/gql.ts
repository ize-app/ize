/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "fragment ActionExecution on ActionExecution {\n  actionId\n  lastAttemptedAt\n  status\n}\n\nfragment Action on Action {\n  __typename\n  ... on CallWebhook {\n    ...CallWebhook\n  }\n  ... on EvolveFlow {\n    ...EvolveFlow\n  }\n  ... on TriggerStep {\n    ...TriggerStep\n  }\n}\n\nfragment CallWebhook on CallWebhook {\n  filterOption {\n    ...Option\n  }\n  uri\n  name\n}\n\nfragment EvolveFlow on EvolveFlow {\n  filterOption {\n    ...Option\n  }\n}\n\nfragment TriggerStep on TriggerStep {\n  filterOption {\n    ...Option\n  }\n}": types.ActionExecutionFragmentDoc,
    "query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  chain\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}": types.NftContractDocument,
    "query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}": types.DiscordServerRolesDocument,
    "mutation NewEntities($entities: [NewEntityArgs!]!) {\n  newEntities(entities: $entities) {\n    ...EntitySummaryParts\n  }\n}\n\nmutation NewCustomGroup($inputs: CustomGroupArgs!) {\n  newCustomGroup(inputs: $inputs)\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...GroupSummaryParts\n  }\n}\n\nquery Groups {\n  groupsForCurrentUser {\n    ...GroupSummaryParts\n  }\n}\n\nfragment EntitySummaryParts on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  entityId\n  name\n  icon\n  memberCount\n  color\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n  ... on GroupCustom {\n    ...GroupCustomParts\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment GroupCustomParts on GroupCustom {\n  id\n  name\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}\n\nfragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n  email\n  icon\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n  username\n  discordUserId\n  avatar\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  entityId\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}": types.NewEntitiesDocument,
    "fragment Field on Field {\n  __typename\n  ... on Options {\n    ...Options\n  }\n  ... on FreeInput {\n    ...FreeInput\n  }\n}\n\nfragment Options on Options {\n  fieldId\n  name\n  required\n  previousStepOptions\n  hasRequestOptions\n  requestOptionsDataType\n  selectionType\n  maxSelections\n  linkedResultOptions {\n    ...LinkedResult\n  }\n  options {\n    ...Option\n  }\n}\n\nfragment FreeInput on FreeInput {\n  fieldId\n  name\n  required\n  dataType\n}\n\nfragment Option on Option {\n  optionId\n  name\n  dataType\n}\n\nfragment LinkedResult on LinkedResult {\n  resultConfigId\n  resultType\n  fieldId\n  fieldName\n}\n\nfragment UserFieldAnswer on UserFieldAnswer {\n  createdAt\n  user {\n    ...UserSummaryParts\n  }\n  answer {\n    ...FieldAnswer\n  }\n}\n\nfragment UserFieldAnswers on UserFieldAnswers {\n  fieldId\n  answers {\n    ...UserFieldAnswer\n  }\n}\n\nfragment FieldAnswer on FieldAnswer {\n  __typename\n  ... on OptionFieldAnswer {\n    ...OptionFieldAnswer\n  }\n  ... on FreeInputFieldAnswer {\n    ...FreeInputFieldAnswer\n  }\n}\n\nfragment OptionFieldAnswer on OptionFieldAnswer {\n  fieldId\n  selections {\n    ...OptionFieldAnswerSelection\n  }\n}\n\nfragment FreeInputFieldAnswer on FreeInputFieldAnswer {\n  fieldId\n  value\n}\n\nfragment OptionFieldAnswerSelection on OptionFieldAnswerSelection {\n  optionId\n}": types.FieldFragmentDoc,
    "mutation NewFlow($flow: NewFlowArgs!) {\n  newFlow(flow: $flow)\n}\n\nquery GetFlow($flowId: String!, $flowVersionId: String) {\n  getFlow(flowId: $flowId, flowVersionId: $flowVersionId) {\n    ...Flow\n  }\n}\n\nquery GetFlows {\n  getFlows {\n    ...FlowSummary\n  }\n}\n\nfragment Flow on Flow {\n  ...FlowFields\n  evolve {\n    ...FlowFields\n  }\n}\n\nfragment FlowSummary on FlowSummary {\n  flowId\n  name\n  createdAt\n  creator {\n    ...UserSummaryParts\n  }\n  requestStep0Permission {\n    ...Permission\n  }\n  userPermission {\n    ...UserFlowPermission\n  }\n}\n\nfragment FlowFields on Flow {\n  id\n  flowId\n  flowVersionId\n  currentFlowVersionId\n  type\n  name\n  reusable\n  steps {\n    ...Step\n  }\n}\n\nfragment Step on Step {\n  id\n  request {\n    ...RequestConfig\n  }\n  response {\n    ...ResponseConfig\n  }\n  result {\n    ...ResultConfig\n  }\n  action {\n    ...Action\n  }\n  expirationSeconds\n  allowMultipleResponses\n  userPermission {\n    ...UserPermission\n  }\n}\n\nfragment RequestConfig on RequestConfig {\n  permission {\n    ...Permission\n  }\n  fields {\n    ...Field\n  }\n}\n\nfragment ResponseConfig on ResponseConfig {\n  permission {\n    ...Permission\n  }\n  fields {\n    ...Field\n  }\n}\n\nfragment UserPermission on UserPermission {\n  request\n  response\n}\n\nfragment UserFlowPermission on UserFlowPermission {\n  request\n}": types.NewFlowDocument,
    "fragment Permission on Permission {\n  stepTriggered\n  anyone\n  entities {\n    ...Entity\n  }\n}\n\nfragment Entity on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}": types.PermissionFragmentDoc,
    "mutation NewRequest($request: NewRequestArgs!) {\n  newRequest(request: $request)\n}\n\nmutation NewResponse($response: NewResponseArgs!) {\n  newResponse(response: $response)\n}\n\nquery getRequest($requestId: String!) {\n  getRequest(requestId: $requestId) {\n    ...Request\n  }\n}\n\nquery getRequestSteps($cursor: String, $limit: Int!, $userOnly: Boolean!, $flowId: String, $searchQuery: String!) {\n  getRequestSteps(\n    cursor: $cursor\n    limit: $limit\n    userOnly: $userOnly\n    flowId: $flowId\n    searchQuery: $searchQuery\n  ) {\n    ...RequestStepSummary\n  }\n}\n\nfragment Request on Request {\n  name\n  creator {\n    ...UserSummaryParts\n  }\n  flow {\n    ...Flow\n  }\n  requestId\n  currentStepIndex\n  createdAt\n  steps {\n    ...RequestStep\n  }\n  final\n}\n\nfragment RequestStep on RequestStep {\n  requestStepId\n  createdAt\n  expirationDate\n  requestFieldAnswers {\n    ...FieldAnswer\n  }\n  responseFieldAnswers {\n    ...UserFieldAnswers\n  }\n  responseFields {\n    ...Field\n  }\n  userResponses {\n    ...Response\n  }\n  results {\n    ...Result\n  }\n  actionExecution {\n    ...ActionExecution\n  }\n  responseComplete\n  resultsComplete\n  final\n}\n\nfragment RequestStepSummary on RequestStepSummary {\n  id\n  requestStepId\n  requestId\n  flowId\n  requestName\n  flowName\n  creator {\n    ...UserSummaryParts\n  }\n  respondPermission {\n    ...Permission\n  }\n  userRespondPermission\n  stepIndex\n  totalSteps\n  createdAt\n  expirationDate\n  responseComplete\n  resultsComplete\n  actionsComplete\n  final\n}\n\nfragment Response on Response {\n  responseId\n  createdAt\n  user {\n    ...UserSummaryParts\n  }\n  answers {\n    ...FieldAnswer\n  }\n}": types.NewRequestDocument,
    "fragment ResultConfig on ResultConfig {\n  __typename\n  ... on Decision {\n    ...Decision\n  }\n  ... on Ranking {\n    ...Ranking\n  }\n  ... on LlmSummary {\n    ...LlmSummary\n  }\n}\n\nfragment Result on Result {\n  id\n  createdAt\n  resultConfigId\n  resultItems {\n    ...ResultItem\n  }\n}\n\nfragment ResultItem on ResultItem {\n  id\n  dataType\n  value\n  optionId\n}\n\nfragment Decision on Decision {\n  fieldId\n  resultConfigId\n  minimumAnswers\n  decisionType\n  defaultOption {\n    ...Option\n  }\n  threshold\n}\n\nfragment Ranking on Ranking {\n  fieldId\n  resultConfigId\n  numOptionsToInclude\n}\n\nfragment LlmSummary on LlmSummary {\n  fieldId\n  resultConfigId\n  prompt\n}": types.ResultConfigFragmentDoc,
    "query Me {\n  me {\n    ...MeParts\n  }\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  discordServers {\n    ...DiscordServerParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  createdAt\n}": types.MeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ActionExecution on ActionExecution {\n  actionId\n  lastAttemptedAt\n  status\n}\n\nfragment Action on Action {\n  __typename\n  ... on CallWebhook {\n    ...CallWebhook\n  }\n  ... on EvolveFlow {\n    ...EvolveFlow\n  }\n  ... on TriggerStep {\n    ...TriggerStep\n  }\n}\n\nfragment CallWebhook on CallWebhook {\n  filterOption {\n    ...Option\n  }\n  uri\n  name\n}\n\nfragment EvolveFlow on EvolveFlow {\n  filterOption {\n    ...Option\n  }\n}\n\nfragment TriggerStep on TriggerStep {\n  filterOption {\n    ...Option\n  }\n}"): (typeof documents)["fragment ActionExecution on ActionExecution {\n  actionId\n  lastAttemptedAt\n  status\n}\n\nfragment Action on Action {\n  __typename\n  ... on CallWebhook {\n    ...CallWebhook\n  }\n  ... on EvolveFlow {\n    ...EvolveFlow\n  }\n  ... on TriggerStep {\n    ...TriggerStep\n  }\n}\n\nfragment CallWebhook on CallWebhook {\n  filterOption {\n    ...Option\n  }\n  uri\n  name\n}\n\nfragment EvolveFlow on EvolveFlow {\n  filterOption {\n    ...Option\n  }\n}\n\nfragment TriggerStep on TriggerStep {\n  filterOption {\n    ...Option\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  chain\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}"): (typeof documents)["query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  chain\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}"): (typeof documents)["query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewEntities($entities: [NewEntityArgs!]!) {\n  newEntities(entities: $entities) {\n    ...EntitySummaryParts\n  }\n}\n\nmutation NewCustomGroup($inputs: CustomGroupArgs!) {\n  newCustomGroup(inputs: $inputs)\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...GroupSummaryParts\n  }\n}\n\nquery Groups {\n  groupsForCurrentUser {\n    ...GroupSummaryParts\n  }\n}\n\nfragment EntitySummaryParts on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  entityId\n  name\n  icon\n  memberCount\n  color\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n  ... on GroupCustom {\n    ...GroupCustomParts\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment GroupCustomParts on GroupCustom {\n  id\n  name\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}\n\nfragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n  email\n  icon\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n  username\n  discordUserId\n  avatar\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  entityId\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}"): (typeof documents)["mutation NewEntities($entities: [NewEntityArgs!]!) {\n  newEntities(entities: $entities) {\n    ...EntitySummaryParts\n  }\n}\n\nmutation NewCustomGroup($inputs: CustomGroupArgs!) {\n  newCustomGroup(inputs: $inputs)\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...GroupSummaryParts\n  }\n}\n\nquery Groups {\n  groupsForCurrentUser {\n    ...GroupSummaryParts\n  }\n}\n\nfragment EntitySummaryParts on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  entityId\n  name\n  icon\n  memberCount\n  color\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n  ... on GroupCustom {\n    ...GroupCustomParts\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment GroupCustomParts on GroupCustom {\n  id\n  name\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}\n\nfragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n  email\n  icon\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n  username\n  discordUserId\n  avatar\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  entityId\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Field on Field {\n  __typename\n  ... on Options {\n    ...Options\n  }\n  ... on FreeInput {\n    ...FreeInput\n  }\n}\n\nfragment Options on Options {\n  fieldId\n  name\n  required\n  previousStepOptions\n  hasRequestOptions\n  requestOptionsDataType\n  selectionType\n  maxSelections\n  linkedResultOptions {\n    ...LinkedResult\n  }\n  options {\n    ...Option\n  }\n}\n\nfragment FreeInput on FreeInput {\n  fieldId\n  name\n  required\n  dataType\n}\n\nfragment Option on Option {\n  optionId\n  name\n  dataType\n}\n\nfragment LinkedResult on LinkedResult {\n  resultConfigId\n  resultType\n  fieldId\n  fieldName\n}\n\nfragment UserFieldAnswer on UserFieldAnswer {\n  createdAt\n  user {\n    ...UserSummaryParts\n  }\n  answer {\n    ...FieldAnswer\n  }\n}\n\nfragment UserFieldAnswers on UserFieldAnswers {\n  fieldId\n  answers {\n    ...UserFieldAnswer\n  }\n}\n\nfragment FieldAnswer on FieldAnswer {\n  __typename\n  ... on OptionFieldAnswer {\n    ...OptionFieldAnswer\n  }\n  ... on FreeInputFieldAnswer {\n    ...FreeInputFieldAnswer\n  }\n}\n\nfragment OptionFieldAnswer on OptionFieldAnswer {\n  fieldId\n  selections {\n    ...OptionFieldAnswerSelection\n  }\n}\n\nfragment FreeInputFieldAnswer on FreeInputFieldAnswer {\n  fieldId\n  value\n}\n\nfragment OptionFieldAnswerSelection on OptionFieldAnswerSelection {\n  optionId\n}"): (typeof documents)["fragment Field on Field {\n  __typename\n  ... on Options {\n    ...Options\n  }\n  ... on FreeInput {\n    ...FreeInput\n  }\n}\n\nfragment Options on Options {\n  fieldId\n  name\n  required\n  previousStepOptions\n  hasRequestOptions\n  requestOptionsDataType\n  selectionType\n  maxSelections\n  linkedResultOptions {\n    ...LinkedResult\n  }\n  options {\n    ...Option\n  }\n}\n\nfragment FreeInput on FreeInput {\n  fieldId\n  name\n  required\n  dataType\n}\n\nfragment Option on Option {\n  optionId\n  name\n  dataType\n}\n\nfragment LinkedResult on LinkedResult {\n  resultConfigId\n  resultType\n  fieldId\n  fieldName\n}\n\nfragment UserFieldAnswer on UserFieldAnswer {\n  createdAt\n  user {\n    ...UserSummaryParts\n  }\n  answer {\n    ...FieldAnswer\n  }\n}\n\nfragment UserFieldAnswers on UserFieldAnswers {\n  fieldId\n  answers {\n    ...UserFieldAnswer\n  }\n}\n\nfragment FieldAnswer on FieldAnswer {\n  __typename\n  ... on OptionFieldAnswer {\n    ...OptionFieldAnswer\n  }\n  ... on FreeInputFieldAnswer {\n    ...FreeInputFieldAnswer\n  }\n}\n\nfragment OptionFieldAnswer on OptionFieldAnswer {\n  fieldId\n  selections {\n    ...OptionFieldAnswerSelection\n  }\n}\n\nfragment FreeInputFieldAnswer on FreeInputFieldAnswer {\n  fieldId\n  value\n}\n\nfragment OptionFieldAnswerSelection on OptionFieldAnswerSelection {\n  optionId\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewFlow($flow: NewFlowArgs!) {\n  newFlow(flow: $flow)\n}\n\nquery GetFlow($flowId: String!, $flowVersionId: String) {\n  getFlow(flowId: $flowId, flowVersionId: $flowVersionId) {\n    ...Flow\n  }\n}\n\nquery GetFlows {\n  getFlows {\n    ...FlowSummary\n  }\n}\n\nfragment Flow on Flow {\n  ...FlowFields\n  evolve {\n    ...FlowFields\n  }\n}\n\nfragment FlowSummary on FlowSummary {\n  flowId\n  name\n  createdAt\n  creator {\n    ...UserSummaryParts\n  }\n  requestStep0Permission {\n    ...Permission\n  }\n  userPermission {\n    ...UserFlowPermission\n  }\n}\n\nfragment FlowFields on Flow {\n  id\n  flowId\n  flowVersionId\n  currentFlowVersionId\n  type\n  name\n  reusable\n  steps {\n    ...Step\n  }\n}\n\nfragment Step on Step {\n  id\n  request {\n    ...RequestConfig\n  }\n  response {\n    ...ResponseConfig\n  }\n  result {\n    ...ResultConfig\n  }\n  action {\n    ...Action\n  }\n  expirationSeconds\n  allowMultipleResponses\n  userPermission {\n    ...UserPermission\n  }\n}\n\nfragment RequestConfig on RequestConfig {\n  permission {\n    ...Permission\n  }\n  fields {\n    ...Field\n  }\n}\n\nfragment ResponseConfig on ResponseConfig {\n  permission {\n    ...Permission\n  }\n  fields {\n    ...Field\n  }\n}\n\nfragment UserPermission on UserPermission {\n  request\n  response\n}\n\nfragment UserFlowPermission on UserFlowPermission {\n  request\n}"): (typeof documents)["mutation NewFlow($flow: NewFlowArgs!) {\n  newFlow(flow: $flow)\n}\n\nquery GetFlow($flowId: String!, $flowVersionId: String) {\n  getFlow(flowId: $flowId, flowVersionId: $flowVersionId) {\n    ...Flow\n  }\n}\n\nquery GetFlows {\n  getFlows {\n    ...FlowSummary\n  }\n}\n\nfragment Flow on Flow {\n  ...FlowFields\n  evolve {\n    ...FlowFields\n  }\n}\n\nfragment FlowSummary on FlowSummary {\n  flowId\n  name\n  createdAt\n  creator {\n    ...UserSummaryParts\n  }\n  requestStep0Permission {\n    ...Permission\n  }\n  userPermission {\n    ...UserFlowPermission\n  }\n}\n\nfragment FlowFields on Flow {\n  id\n  flowId\n  flowVersionId\n  currentFlowVersionId\n  type\n  name\n  reusable\n  steps {\n    ...Step\n  }\n}\n\nfragment Step on Step {\n  id\n  request {\n    ...RequestConfig\n  }\n  response {\n    ...ResponseConfig\n  }\n  result {\n    ...ResultConfig\n  }\n  action {\n    ...Action\n  }\n  expirationSeconds\n  allowMultipleResponses\n  userPermission {\n    ...UserPermission\n  }\n}\n\nfragment RequestConfig on RequestConfig {\n  permission {\n    ...Permission\n  }\n  fields {\n    ...Field\n  }\n}\n\nfragment ResponseConfig on ResponseConfig {\n  permission {\n    ...Permission\n  }\n  fields {\n    ...Field\n  }\n}\n\nfragment UserPermission on UserPermission {\n  request\n  response\n}\n\nfragment UserFlowPermission on UserFlowPermission {\n  request\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Permission on Permission {\n  stepTriggered\n  anyone\n  entities {\n    ...Entity\n  }\n}\n\nfragment Entity on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}"): (typeof documents)["fragment Permission on Permission {\n  stepTriggered\n  anyone\n  entities {\n    ...Entity\n  }\n}\n\nfragment Entity on Entity {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewRequest($request: NewRequestArgs!) {\n  newRequest(request: $request)\n}\n\nmutation NewResponse($response: NewResponseArgs!) {\n  newResponse(response: $response)\n}\n\nquery getRequest($requestId: String!) {\n  getRequest(requestId: $requestId) {\n    ...Request\n  }\n}\n\nquery getRequestSteps($cursor: String, $limit: Int!, $userOnly: Boolean!, $flowId: String, $searchQuery: String!) {\n  getRequestSteps(\n    cursor: $cursor\n    limit: $limit\n    userOnly: $userOnly\n    flowId: $flowId\n    searchQuery: $searchQuery\n  ) {\n    ...RequestStepSummary\n  }\n}\n\nfragment Request on Request {\n  name\n  creator {\n    ...UserSummaryParts\n  }\n  flow {\n    ...Flow\n  }\n  requestId\n  currentStepIndex\n  createdAt\n  steps {\n    ...RequestStep\n  }\n  final\n}\n\nfragment RequestStep on RequestStep {\n  requestStepId\n  createdAt\n  expirationDate\n  requestFieldAnswers {\n    ...FieldAnswer\n  }\n  responseFieldAnswers {\n    ...UserFieldAnswers\n  }\n  responseFields {\n    ...Field\n  }\n  userResponses {\n    ...Response\n  }\n  results {\n    ...Result\n  }\n  actionExecution {\n    ...ActionExecution\n  }\n  responseComplete\n  resultsComplete\n  final\n}\n\nfragment RequestStepSummary on RequestStepSummary {\n  id\n  requestStepId\n  requestId\n  flowId\n  requestName\n  flowName\n  creator {\n    ...UserSummaryParts\n  }\n  respondPermission {\n    ...Permission\n  }\n  userRespondPermission\n  stepIndex\n  totalSteps\n  createdAt\n  expirationDate\n  responseComplete\n  resultsComplete\n  actionsComplete\n  final\n}\n\nfragment Response on Response {\n  responseId\n  createdAt\n  user {\n    ...UserSummaryParts\n  }\n  answers {\n    ...FieldAnswer\n  }\n}"): (typeof documents)["mutation NewRequest($request: NewRequestArgs!) {\n  newRequest(request: $request)\n}\n\nmutation NewResponse($response: NewResponseArgs!) {\n  newResponse(response: $response)\n}\n\nquery getRequest($requestId: String!) {\n  getRequest(requestId: $requestId) {\n    ...Request\n  }\n}\n\nquery getRequestSteps($cursor: String, $limit: Int!, $userOnly: Boolean!, $flowId: String, $searchQuery: String!) {\n  getRequestSteps(\n    cursor: $cursor\n    limit: $limit\n    userOnly: $userOnly\n    flowId: $flowId\n    searchQuery: $searchQuery\n  ) {\n    ...RequestStepSummary\n  }\n}\n\nfragment Request on Request {\n  name\n  creator {\n    ...UserSummaryParts\n  }\n  flow {\n    ...Flow\n  }\n  requestId\n  currentStepIndex\n  createdAt\n  steps {\n    ...RequestStep\n  }\n  final\n}\n\nfragment RequestStep on RequestStep {\n  requestStepId\n  createdAt\n  expirationDate\n  requestFieldAnswers {\n    ...FieldAnswer\n  }\n  responseFieldAnswers {\n    ...UserFieldAnswers\n  }\n  responseFields {\n    ...Field\n  }\n  userResponses {\n    ...Response\n  }\n  results {\n    ...Result\n  }\n  actionExecution {\n    ...ActionExecution\n  }\n  responseComplete\n  resultsComplete\n  final\n}\n\nfragment RequestStepSummary on RequestStepSummary {\n  id\n  requestStepId\n  requestId\n  flowId\n  requestName\n  flowName\n  creator {\n    ...UserSummaryParts\n  }\n  respondPermission {\n    ...Permission\n  }\n  userRespondPermission\n  stepIndex\n  totalSteps\n  createdAt\n  expirationDate\n  responseComplete\n  resultsComplete\n  actionsComplete\n  final\n}\n\nfragment Response on Response {\n  responseId\n  createdAt\n  user {\n    ...UserSummaryParts\n  }\n  answers {\n    ...FieldAnswer\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ResultConfig on ResultConfig {\n  __typename\n  ... on Decision {\n    ...Decision\n  }\n  ... on Ranking {\n    ...Ranking\n  }\n  ... on LlmSummary {\n    ...LlmSummary\n  }\n}\n\nfragment Result on Result {\n  id\n  createdAt\n  resultConfigId\n  resultItems {\n    ...ResultItem\n  }\n}\n\nfragment ResultItem on ResultItem {\n  id\n  dataType\n  value\n  optionId\n}\n\nfragment Decision on Decision {\n  fieldId\n  resultConfigId\n  minimumAnswers\n  decisionType\n  defaultOption {\n    ...Option\n  }\n  threshold\n}\n\nfragment Ranking on Ranking {\n  fieldId\n  resultConfigId\n  numOptionsToInclude\n}\n\nfragment LlmSummary on LlmSummary {\n  fieldId\n  resultConfigId\n  prompt\n}"): (typeof documents)["fragment ResultConfig on ResultConfig {\n  __typename\n  ... on Decision {\n    ...Decision\n  }\n  ... on Ranking {\n    ...Ranking\n  }\n  ... on LlmSummary {\n    ...LlmSummary\n  }\n}\n\nfragment Result on Result {\n  id\n  createdAt\n  resultConfigId\n  resultItems {\n    ...ResultItem\n  }\n}\n\nfragment ResultItem on ResultItem {\n  id\n  dataType\n  value\n  optionId\n}\n\nfragment Decision on Decision {\n  fieldId\n  resultConfigId\n  minimumAnswers\n  decisionType\n  defaultOption {\n    ...Option\n  }\n  threshold\n}\n\nfragment Ranking on Ranking {\n  fieldId\n  resultConfigId\n  numOptionsToInclude\n}\n\nfragment LlmSummary on LlmSummary {\n  fieldId\n  resultConfigId\n  prompt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Me {\n  me {\n    ...MeParts\n  }\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  discordServers {\n    ...DiscordServerParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  createdAt\n}"): (typeof documents)["query Me {\n  me {\n    ...MeParts\n  }\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  discordServers {\n    ...DiscordServerParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  createdAt\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;