/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}": types.NftContractDocument,
    "query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}": types.DiscordServerRolesDocument,
    "mutation setUpDiscordServerGroup($input: setUpDiscordServerInput!) {\n  setUpDiscordServer(input: $input) {\n    id\n  }\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...GroupSummaryParts\n  }\n}\n\nquery Groups {\n  groupsForCurrentUser {\n    ...GroupSummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  name\n  icon\n  memberCount\n  color\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  hatsBranch\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}": types.SetUpDiscordServerGroupDocument,
    "fragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n  email\n  icon\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n  username\n  discordUserId\n  avatar\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}": types.IdentityBlockchainSummaryPartsFragmentDoc,
    "mutation NewProcess($process: newProcessArgs!) {\n  newProcess(process: $process)\n}\n\nmutation NewEditProcessRequest($inputs: newEditProcessRequestArgs!) {\n  newEditProcessRequest(inputs: $inputs)\n}\n\nmutation NewAgents($agents: [NewAgentArgs!]!) {\n  newAgents(agents: $agents) {\n    ...AgentSummaryParts\n  }\n}\n\nquery Process($processId: String!) {\n  process(processId: $processId) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery Processes {\n  processesForCurrentUser(requestRoleOnly: false) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery GetProcessesToCreateRequest {\n  processesForCurrentUser(requestRoleOnly: true) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery ProcessesForGroup($groupId: String!) {\n  processesForGroup(groupId: $groupId) {\n    ...ProcessSummaryParts\n  }\n}\n\nfragment BaseProcessSummaryParts on Process {\n  id\n  currentProcessVersionId\n  name\n  description\n  expirationSeconds\n  type\n  options {\n    ...OptionSummaryParts\n  }\n  inputs {\n    ...InputTemplateSummaryParts\n  }\n  roles {\n    ...RoleSummaryParts\n  }\n  decisionSystem {\n    ...DecisionTypesSummaryParts\n  }\n  action {\n    ...ActionSummaryParts\n  }\n  parent {\n    ...ParentProcessSummaryParts\n  }\n  userRoles {\n    ...UserRolesParts\n  }\n  createdAt\n}\n\nfragment ProcessSummaryParts on Process {\n  ...BaseProcessSummaryParts\n  evolve {\n    ...BaseProcessSummaryParts\n  }\n}\n\nfragment AgentSummaryParts on Agent {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserRolesParts on UserRoles {\n  request\n  respond\n}\n\nfragment OptionSummaryParts on ProcessOption {\n  id\n  value\n  type\n}\n\nfragment InputTemplateSummaryParts on InputTemplate {\n  id\n  name\n  type\n  description\n  required\n}\n\nfragment RoleSummaryParts on Roles {\n  request {\n    ...AgentSummaryParts\n  }\n  respond {\n    ...AgentSummaryParts\n  }\n  edit {\n    ...AgentSummaryParts\n  }\n}\n\nfragment ParentProcessSummaryParts on ParentProcess {\n  id\n  name\n}\n\nfragment AbsoluteDecisionSummaryParts on AbsoluteDecision {\n  threshold\n}\n\nfragment PercentageDecisionSummaryParts on PercentageDecision {\n  quorum\n  percentage\n}\n\nfragment DecisionTypesSummaryParts on DecisionTypes {\n  __typename\n  ... on AbsoluteDecision {\n    threshold\n  }\n  ... on PercentageDecision {\n    quorum\n    percentage\n  }\n}\n\nfragment ActionSummaryParts on Action {\n  id\n  optionFilter {\n    ...OptionSummaryParts\n  }\n  actionDetails {\n    ...WebhookActionSummaryParts\n  }\n}\n\nfragment WebhookActionSummaryParts on WebhookAction {\n  uri\n}": types.NewProcessDocument,
    "mutation NewRequest($processId: String!, $requestInputs: [RequestInputArgs!]) {\n  newRequest(processId: $processId, requestInputs: $requestInputs)\n}\n\nmutation NewResponse($requestId: String!, $optionId: String!) {\n  newResponse(requestId: $requestId, optionId: $optionId)\n}\n\nquery Request($requestId: String!) {\n  request(requestId: $requestId) {\n    ...RequestSummaryParts\n  }\n}\n\nquery RequestsForGroup($groupId: String!) {\n  requestsForGroup(groupId: $groupId) {\n    ...RequestSummaryParts\n  }\n}\n\nquery requestsForCurrentUser {\n  requestsForCurrentUser {\n    ...RequestSummaryParts\n  }\n}\n\nquery RequestsForProcess($processId: String!) {\n  requestsForProcess(processId: $processId) {\n    ...RequestSummaryParts\n  }\n}\n\nfragment RequestSummaryParts on Request {\n  id\n  name\n  creator {\n    ...UserSummaryParts\n  }\n  process {\n    ...ProcessSummaryParts\n  }\n  expirationDate\n  inputs {\n    ...RequestInputSummaryParts\n  }\n  createdAt\n  responses {\n    ...ResponsesSummaryParts\n  }\n  result {\n    ...ResultSummaryParts\n  }\n  evolveProcessChanges {\n    ...EvolveProcessChangesSummaryParts\n  }\n}\n\nfragment EvolveProcessChangesSummaryParts on EvolveProcessesDiff {\n  processName\n  processId\n  changes {\n    ...ProposedProcessEvolutionSummaryParts\n  }\n}\n\nfragment ProposedProcessEvolutionSummaryParts on ProposedProcessEvolution {\n  current {\n    ...ProcessSummaryParts\n  }\n  proposed {\n    ...ProcessSummaryParts\n  }\n}\n\nfragment RequestInputSummaryParts on RequestInput {\n  inputTemplateId\n  requestInputId\n  name\n  description\n  type\n  value\n  required\n}\n\nfragment ResponsesSummaryParts on Responses {\n  userResponse {\n    ...ResponseSummaryParts\n  }\n  allResponses {\n    ...ResponseSummaryParts\n  }\n  responseCount {\n    ...ResponseCountSummaryParts\n  }\n}\n\nfragment ResponseSummaryParts on Response {\n  optionId\n  value\n  user {\n    ...UserSummaryParts\n  }\n  type\n  createdAt\n}\n\nfragment ResponseCountSummaryParts on ResponseCount {\n  optionId\n  value\n  type\n  count\n}\n\nfragment ResultSummaryParts on Result {\n  selectedOption {\n    ...OptionSummaryParts\n  }\n  actionComplete\n  createdAt\n}": types.NewRequestDocument,
    "query Me {\n  me {\n    ...MeParts\n  }\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  discordServers {\n    ...DiscordServerParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  createdAt\n}": types.MeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}"): (typeof documents)["query NftContract($address: String!, $chain: Blockchain!) {\n  nftContract(address: $address, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nquery NftToken($address: String!, $tokenId: String!, $chain: Blockchain!) {\n  nftToken(address: $address, tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiTokenParts\n  }\n}\n\nquery HatToken($tokenId: String!, $chain: Blockchain!) {\n  hatToken(tokenId: $tokenId, chain: $chain) {\n    ...AlchemyApiHatTokenParts\n  }\n}\n\nquery SearchNftContracts($query: String!, $chain: Blockchain!) {\n  searchNftContracts(query: $query, chain: $chain) {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiNftContractParts on AlchemyApiNftContract {\n  address\n  name\n  icon\n  chain\n  type\n}\n\nfragment AlchemyApiTokenParts on AlchemyApiNftToken {\n  tokenId\n  name\n  icon\n  contract {\n    ...AlchemyApiNftContractParts\n  }\n}\n\nfragment AlchemyApiHatTokenParts on ApiHatToken {\n  chain\n  tokenId\n  readableTokenId\n  name\n  description\n  icon\n  topHatName\n  topHatIcon\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}"): (typeof documents)["query DiscordServerRoles($serverId: String!) {\n  discordServerRoles(serverId: $serverId) {\n    ...DiscordServerRoleParts\n  }\n}\n\nfragment DiscordServerParts on DiscordServer {\n  id\n  name\n  hasCultsBot\n}\n\nfragment DiscordServerRoleParts on DiscordAPIServerRole {\n  id\n  name\n  botRole\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation setUpDiscordServerGroup($input: setUpDiscordServerInput!) {\n  setUpDiscordServer(input: $input) {\n    id\n  }\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...GroupSummaryParts\n  }\n}\n\nquery Groups {\n  groupsForCurrentUser {\n    ...GroupSummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  name\n  icon\n  memberCount\n  color\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  hatsBranch\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}"): (typeof documents)["mutation setUpDiscordServerGroup($input: setUpDiscordServerInput!) {\n  setUpDiscordServer(input: $input) {\n    id\n  }\n}\n\nquery Group($id: String!) {\n  group(id: $id) {\n    ...GroupSummaryParts\n  }\n}\n\nquery Groups {\n  groupsForCurrentUser {\n    ...GroupSummaryParts\n  }\n}\n\nfragment GroupSummaryParts on Group {\n  __typename\n  id\n  name\n  icon\n  memberCount\n  color\n  createdAt\n  groupType {\n    ...GroupTypeSummaryParts\n  }\n  organization {\n    ...OrganizationParts\n  }\n}\n\nfragment GroupTypeSummaryParts on GroupType {\n  __typename\n  ... on DiscordRoleGroup {\n    ...DiscordRoleGroupParts\n  }\n  ... on GroupNft {\n    ...GroupNftParts\n  }\n}\n\nfragment DiscordRoleGroupParts on DiscordRoleGroup {\n  id\n  name\n  color\n  icon\n  discordRoleId\n  discordServer {\n    ...OnboardedDiscordServerParts\n  }\n}\n\nfragment GroupNftParts on GroupNft {\n  id\n  name\n  icon\n  tokenId\n  hatsBranch\n  NftCollection {\n    ...NftCollectionParts\n  }\n}\n\nfragment NftCollectionParts on NftCollection {\n  id\n  name\n  icon\n  chain\n  type\n  address\n}\n\nfragment OrganizationParts on Organization {\n  name\n  icon\n}\n\nfragment OnboardedDiscordServerParts on OnboardedDiscordServer {\n  id\n  discordServerId\n  name\n  icon\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n  email\n  icon\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n  username\n  discordUserId\n  avatar\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}"): (typeof documents)["fragment IdentityBlockchainSummaryParts on IdentityBlockchain {\n  id\n  address\n}\n\nfragment IdentityEmailSummaryParts on IdentityEmail {\n  id\n  email\n  icon\n}\n\nfragment IdentityDiscordSummaryParts on IdentityDiscord {\n  id\n  username\n  discordUserId\n  avatar\n}\n\nfragment IdentityTypesSummaryParts on IdentityType {\n  __typename\n  ... on IdentityBlockchain {\n    ...IdentityBlockchainSummaryParts\n  }\n  ... on IdentityEmail {\n    ...IdentityEmailSummaryParts\n  }\n  ... on IdentityDiscord {\n    ...IdentityDiscordSummaryParts\n  }\n}\n\nfragment IdentitySummaryParts on Identity {\n  __typename\n  id\n  name\n  icon\n  identityType {\n    ...IdentityTypesSummaryParts\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewProcess($process: newProcessArgs!) {\n  newProcess(process: $process)\n}\n\nmutation NewEditProcessRequest($inputs: newEditProcessRequestArgs!) {\n  newEditProcessRequest(inputs: $inputs)\n}\n\nmutation NewAgents($agents: [NewAgentArgs!]!) {\n  newAgents(agents: $agents) {\n    ...AgentSummaryParts\n  }\n}\n\nquery Process($processId: String!) {\n  process(processId: $processId) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery Processes {\n  processesForCurrentUser(requestRoleOnly: false) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery GetProcessesToCreateRequest {\n  processesForCurrentUser(requestRoleOnly: true) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery ProcessesForGroup($groupId: String!) {\n  processesForGroup(groupId: $groupId) {\n    ...ProcessSummaryParts\n  }\n}\n\nfragment BaseProcessSummaryParts on Process {\n  id\n  currentProcessVersionId\n  name\n  description\n  expirationSeconds\n  type\n  options {\n    ...OptionSummaryParts\n  }\n  inputs {\n    ...InputTemplateSummaryParts\n  }\n  roles {\n    ...RoleSummaryParts\n  }\n  decisionSystem {\n    ...DecisionTypesSummaryParts\n  }\n  action {\n    ...ActionSummaryParts\n  }\n  parent {\n    ...ParentProcessSummaryParts\n  }\n  userRoles {\n    ...UserRolesParts\n  }\n  createdAt\n}\n\nfragment ProcessSummaryParts on Process {\n  ...BaseProcessSummaryParts\n  evolve {\n    ...BaseProcessSummaryParts\n  }\n}\n\nfragment AgentSummaryParts on Agent {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserRolesParts on UserRoles {\n  request\n  respond\n}\n\nfragment OptionSummaryParts on ProcessOption {\n  id\n  value\n  type\n}\n\nfragment InputTemplateSummaryParts on InputTemplate {\n  id\n  name\n  type\n  description\n  required\n}\n\nfragment RoleSummaryParts on Roles {\n  request {\n    ...AgentSummaryParts\n  }\n  respond {\n    ...AgentSummaryParts\n  }\n  edit {\n    ...AgentSummaryParts\n  }\n}\n\nfragment ParentProcessSummaryParts on ParentProcess {\n  id\n  name\n}\n\nfragment AbsoluteDecisionSummaryParts on AbsoluteDecision {\n  threshold\n}\n\nfragment PercentageDecisionSummaryParts on PercentageDecision {\n  quorum\n  percentage\n}\n\nfragment DecisionTypesSummaryParts on DecisionTypes {\n  __typename\n  ... on AbsoluteDecision {\n    threshold\n  }\n  ... on PercentageDecision {\n    quorum\n    percentage\n  }\n}\n\nfragment ActionSummaryParts on Action {\n  id\n  optionFilter {\n    ...OptionSummaryParts\n  }\n  actionDetails {\n    ...WebhookActionSummaryParts\n  }\n}\n\nfragment WebhookActionSummaryParts on WebhookAction {\n  uri\n}"): (typeof documents)["mutation NewProcess($process: newProcessArgs!) {\n  newProcess(process: $process)\n}\n\nmutation NewEditProcessRequest($inputs: newEditProcessRequestArgs!) {\n  newEditProcessRequest(inputs: $inputs)\n}\n\nmutation NewAgents($agents: [NewAgentArgs!]!) {\n  newAgents(agents: $agents) {\n    ...AgentSummaryParts\n  }\n}\n\nquery Process($processId: String!) {\n  process(processId: $processId) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery Processes {\n  processesForCurrentUser(requestRoleOnly: false) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery GetProcessesToCreateRequest {\n  processesForCurrentUser(requestRoleOnly: true) {\n    ...ProcessSummaryParts\n  }\n}\n\nquery ProcessesForGroup($groupId: String!) {\n  processesForGroup(groupId: $groupId) {\n    ...ProcessSummaryParts\n  }\n}\n\nfragment BaseProcessSummaryParts on Process {\n  id\n  currentProcessVersionId\n  name\n  description\n  expirationSeconds\n  type\n  options {\n    ...OptionSummaryParts\n  }\n  inputs {\n    ...InputTemplateSummaryParts\n  }\n  roles {\n    ...RoleSummaryParts\n  }\n  decisionSystem {\n    ...DecisionTypesSummaryParts\n  }\n  action {\n    ...ActionSummaryParts\n  }\n  parent {\n    ...ParentProcessSummaryParts\n  }\n  userRoles {\n    ...UserRolesParts\n  }\n  createdAt\n}\n\nfragment ProcessSummaryParts on Process {\n  ...BaseProcessSummaryParts\n  evolve {\n    ...BaseProcessSummaryParts\n  }\n}\n\nfragment AgentSummaryParts on Agent {\n  __typename\n  ... on Group {\n    ...GroupSummaryParts\n  }\n  ... on Identity {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserRolesParts on UserRoles {\n  request\n  respond\n}\n\nfragment OptionSummaryParts on ProcessOption {\n  id\n  value\n  type\n}\n\nfragment InputTemplateSummaryParts on InputTemplate {\n  id\n  name\n  type\n  description\n  required\n}\n\nfragment RoleSummaryParts on Roles {\n  request {\n    ...AgentSummaryParts\n  }\n  respond {\n    ...AgentSummaryParts\n  }\n  edit {\n    ...AgentSummaryParts\n  }\n}\n\nfragment ParentProcessSummaryParts on ParentProcess {\n  id\n  name\n}\n\nfragment AbsoluteDecisionSummaryParts on AbsoluteDecision {\n  threshold\n}\n\nfragment PercentageDecisionSummaryParts on PercentageDecision {\n  quorum\n  percentage\n}\n\nfragment DecisionTypesSummaryParts on DecisionTypes {\n  __typename\n  ... on AbsoluteDecision {\n    threshold\n  }\n  ... on PercentageDecision {\n    quorum\n    percentage\n  }\n}\n\nfragment ActionSummaryParts on Action {\n  id\n  optionFilter {\n    ...OptionSummaryParts\n  }\n  actionDetails {\n    ...WebhookActionSummaryParts\n  }\n}\n\nfragment WebhookActionSummaryParts on WebhookAction {\n  uri\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NewRequest($processId: String!, $requestInputs: [RequestInputArgs!]) {\n  newRequest(processId: $processId, requestInputs: $requestInputs)\n}\n\nmutation NewResponse($requestId: String!, $optionId: String!) {\n  newResponse(requestId: $requestId, optionId: $optionId)\n}\n\nquery Request($requestId: String!) {\n  request(requestId: $requestId) {\n    ...RequestSummaryParts\n  }\n}\n\nquery RequestsForGroup($groupId: String!) {\n  requestsForGroup(groupId: $groupId) {\n    ...RequestSummaryParts\n  }\n}\n\nquery requestsForCurrentUser {\n  requestsForCurrentUser {\n    ...RequestSummaryParts\n  }\n}\n\nquery RequestsForProcess($processId: String!) {\n  requestsForProcess(processId: $processId) {\n    ...RequestSummaryParts\n  }\n}\n\nfragment RequestSummaryParts on Request {\n  id\n  name\n  creator {\n    ...UserSummaryParts\n  }\n  process {\n    ...ProcessSummaryParts\n  }\n  expirationDate\n  inputs {\n    ...RequestInputSummaryParts\n  }\n  createdAt\n  responses {\n    ...ResponsesSummaryParts\n  }\n  result {\n    ...ResultSummaryParts\n  }\n  evolveProcessChanges {\n    ...EvolveProcessChangesSummaryParts\n  }\n}\n\nfragment EvolveProcessChangesSummaryParts on EvolveProcessesDiff {\n  processName\n  processId\n  changes {\n    ...ProposedProcessEvolutionSummaryParts\n  }\n}\n\nfragment ProposedProcessEvolutionSummaryParts on ProposedProcessEvolution {\n  current {\n    ...ProcessSummaryParts\n  }\n  proposed {\n    ...ProcessSummaryParts\n  }\n}\n\nfragment RequestInputSummaryParts on RequestInput {\n  inputTemplateId\n  requestInputId\n  name\n  description\n  type\n  value\n  required\n}\n\nfragment ResponsesSummaryParts on Responses {\n  userResponse {\n    ...ResponseSummaryParts\n  }\n  allResponses {\n    ...ResponseSummaryParts\n  }\n  responseCount {\n    ...ResponseCountSummaryParts\n  }\n}\n\nfragment ResponseSummaryParts on Response {\n  optionId\n  value\n  user {\n    ...UserSummaryParts\n  }\n  type\n  createdAt\n}\n\nfragment ResponseCountSummaryParts on ResponseCount {\n  optionId\n  value\n  type\n  count\n}\n\nfragment ResultSummaryParts on Result {\n  selectedOption {\n    ...OptionSummaryParts\n  }\n  actionComplete\n  createdAt\n}"): (typeof documents)["mutation NewRequest($processId: String!, $requestInputs: [RequestInputArgs!]) {\n  newRequest(processId: $processId, requestInputs: $requestInputs)\n}\n\nmutation NewResponse($requestId: String!, $optionId: String!) {\n  newResponse(requestId: $requestId, optionId: $optionId)\n}\n\nquery Request($requestId: String!) {\n  request(requestId: $requestId) {\n    ...RequestSummaryParts\n  }\n}\n\nquery RequestsForGroup($groupId: String!) {\n  requestsForGroup(groupId: $groupId) {\n    ...RequestSummaryParts\n  }\n}\n\nquery requestsForCurrentUser {\n  requestsForCurrentUser {\n    ...RequestSummaryParts\n  }\n}\n\nquery RequestsForProcess($processId: String!) {\n  requestsForProcess(processId: $processId) {\n    ...RequestSummaryParts\n  }\n}\n\nfragment RequestSummaryParts on Request {\n  id\n  name\n  creator {\n    ...UserSummaryParts\n  }\n  process {\n    ...ProcessSummaryParts\n  }\n  expirationDate\n  inputs {\n    ...RequestInputSummaryParts\n  }\n  createdAt\n  responses {\n    ...ResponsesSummaryParts\n  }\n  result {\n    ...ResultSummaryParts\n  }\n  evolveProcessChanges {\n    ...EvolveProcessChangesSummaryParts\n  }\n}\n\nfragment EvolveProcessChangesSummaryParts on EvolveProcessesDiff {\n  processName\n  processId\n  changes {\n    ...ProposedProcessEvolutionSummaryParts\n  }\n}\n\nfragment ProposedProcessEvolutionSummaryParts on ProposedProcessEvolution {\n  current {\n    ...ProcessSummaryParts\n  }\n  proposed {\n    ...ProcessSummaryParts\n  }\n}\n\nfragment RequestInputSummaryParts on RequestInput {\n  inputTemplateId\n  requestInputId\n  name\n  description\n  type\n  value\n  required\n}\n\nfragment ResponsesSummaryParts on Responses {\n  userResponse {\n    ...ResponseSummaryParts\n  }\n  allResponses {\n    ...ResponseSummaryParts\n  }\n  responseCount {\n    ...ResponseCountSummaryParts\n  }\n}\n\nfragment ResponseSummaryParts on Response {\n  optionId\n  value\n  user {\n    ...UserSummaryParts\n  }\n  type\n  createdAt\n}\n\nfragment ResponseCountSummaryParts on ResponseCount {\n  optionId\n  value\n  type\n  count\n}\n\nfragment ResultSummaryParts on Result {\n  selectedOption {\n    ...OptionSummaryParts\n  }\n  actionComplete\n  createdAt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Me {\n  me {\n    ...MeParts\n  }\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  discordServers {\n    ...DiscordServerParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  createdAt\n}"): (typeof documents)["query Me {\n  me {\n    ...MeParts\n  }\n}\n\nfragment MeParts on Me {\n  user {\n    ...UserSummaryParts\n  }\n  discordServers {\n    ...DiscordServerParts\n  }\n  identities {\n    ...IdentitySummaryParts\n  }\n}\n\nfragment UserSummaryParts on User {\n  id\n  name\n  icon\n  createdAt\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;