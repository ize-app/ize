mutation NewFlow($new: NewFlowWithEvolveArgs!) {
  newFlow(new: $new)
}

query GetFlow($flowId: String, $flowVersionId: String, $isForEvolveRequest: Boolean) {
  getFlow(flowId: $flowId, flowVersionId: $flowVersionId, isForEvolveRequest: $isForEvolveRequest) {
    ...Flow
  }
}

query GetFlows(
  $cursor: String
  $limit: Int!
  $groupId: String
  $searchQuery: String!
  $watchFilter: WatchFilter!
  $excludeOwnedFlows: Boolean
  $triggerPermissionFilter: FlowTriggerPermissionFilter!
) {
  getFlows(
    cursor: $cursor
    limit: $limit
    groupId: $groupId
    searchQuery: $searchQuery
    watchFilter: $watchFilter
    triggerPermissionFilter: $triggerPermissionFilter
    excludeOwnedFlows: $excludeOwnedFlows
  ) {
    ...FlowSummary
  }
}

fragment Flow on Flow {
  ...FlowFields
  evolve {
    ...FlowFields
  }
}

fragment FlowFields on Flow {
  id
  flowId
  flowVersionId
  currentFlowVersionId
  group {
    ...GroupSummaryParts
  }
  createdAt
  versionCreatedAt
  versionPublishedAt
  active
  flowsEvolvedByThisFlow {
    ...FlowReference
  }
  type
  name
  reusable
  fieldSet {
    ...FieldSet
  }
  trigger {
    ...TriggerConfig
  }
  steps {
    ...Step
  }
  isWatched
}

fragment FlowSummary on FlowSummary {
  flowId
  name
  createdAt
  creator {
    ...Entity
  }
  group {
    ...GroupSummaryParts
  }
  trigger {
    ...TriggerConfig
  }
  isWatched
}

fragment FlowReference on FlowReference {
  flowId
  flowName
}

fragment Step on Step {
  id
  fieldSet {
    ...FieldSet
  }
  response {
    ...ResponseConfig
  }
  result {
    ...ResultConfig
  }
  action {
    ...Action
  }
}

fragment TriggerConfig on TriggerConfig {
  permission {
    ...Permission
  }
  userPermission
}

fragment ResponseConfig on ResponseConfig {
  permission {
    ...Permission
  }
  expirationSeconds
  canBeManuallyEnded
  allowMultipleResponses
  userPermission
}
