mutation NewFlow($newFlow: NewFlowMutationArgs!) {
  newFlow(newFlow: $newFlow)
}

query GetFlow($flowId: String, $flowVersionId: String, $isForEvolveRequest: Boolean) {
  getFlow(flowId: $flowId, flowVersionId: $flowVersionId, isForEvolveRequest: $isForEvolveRequest) {
    ...Flow
  }
}

query GetGroupsToWatchFlow($flowId: String, $entities: [String!]!) {
  getGroupsToWatchFlow(flowId: $flowId, entities: $entities) {
    ...GroupsToWatch
  }
}

query GetFlows(
  $cursor: String
  $limit: Int!
  $groupId: String
  $searchQuery: String!
  $flowWatchFilter: FlowWatchFilter!
  $excludeGroupId: String
  $createdByUser: Boolean!
  $hasTriggerPermissions: Boolean!
) {
  getFlows(
    cursor: $cursor
    limit: $limit
    groupId: $groupId
    searchQuery: $searchQuery
    flowWatchFilter: $flowWatchFilter
    hasTriggerPermissions: $hasTriggerPermissions
    createdByUser: $createdByUser
    excludeGroupId: $excludeGroupId
  ) {
    ...FlowSummary
  }
}

fragment Flow on Flow {
  ...FlowFields
  evolve {
    ...FlowFields
  }
}

fragment FlowFields on Flow {
  id
  flowId
  flowVersionId
  currentFlowVersionId
  group {
    ...GroupSummaryParts
  }
  createdAt
  versionCreatedAt
  versionPublishedAt
  active
  flowsEvolvedByThisFlow {
    ...FlowReference
  }
  type
  name
  reusable
  fieldSet {
    ...FieldSet
  }
  trigger {
    ...TriggerConfig
  }
  steps {
    ...Step
  }
  watching {
    ...FlowWatchers
  }
}

fragment FlowSummary on FlowSummary {
  flowId
  flowVersionId
  name
  createdAt
  creator {
    ...Entity
  }
  group {
    ...GroupSummaryParts
  }
  trigger {
    ...TriggerConfig
  }
  watching {
    ...FlowWatchers
  }
}

fragment FlowReference on FlowReference {
  flowId
  flowVersionId
  flowName
}

fragment Step on Step {
  id
  fieldSet {
    ...FieldSet
  }
  response {
    ...ResponseConfig
  }
  result {
    ...ResultConfig
  }
  action {
    ...Action
  }
}

fragment TriggerConfig on TriggerConfig {
  permission {
    ...Permission
  }
  userPermission
}

fragment ResponseConfig on ResponseConfig {
  permission {
    ...Permission
  }
  expirationSeconds
  canBeManuallyEnded
  allowMultipleResponses
  userPermission
  minResponses
}

fragment FlowWatchers on FlowWatchers {
  user
  groups {
    ...GroupSummaryParts
  }
}

fragment GroupsToWatch on GroupsToWatch {
  relevantGroups {
    ...GroupSummaryParts
  }
  otherGroups {
    ...GroupSummaryParts
  }
}
